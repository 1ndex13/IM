Project Structure:
./manage.py
media/products/Без_123имени.jpg
media/products/Без_имени.jpg
products/views.py
products/forms.py
products/admin.py
products/urls.py
products/tests.py
products/models.py
products/apps.py
products/templates/products/supplier_form.html
products/templates/products/supplier_list.html
products/templates/products/product_list.html
products/templates/products/stock_transaction.html
products/templates/products/purchase_invoice_list.html
products/templates/products/purchase_invoice_form.html
products/templates/products/purchase_invoice_detail.html
products/templates/products/product_confirm_delete.html
products/templates/products/product_form.html
products/templates/products/transaction_history.html
products/migrations/0001_initial.py
products/migrations/0003_category_product_image_product_min_stock_product_sku_and_more.py
products/migrations/0004_supplier_purchaseinvoice_purchaseinvoiceitem.py
products/migrations/0002_stocktransaction.py
users/views.py
users/forms.py
users/admin.py
users/urls.py
users/tests.py
users/models.py
users/apps.py
users/management/commands/createsuperuser.py
users/templates/users/login.html
users/templates/users/home.html
users/templates/users/password_reset_done.html
users/templates/users/password_reset.html
users/templates/users/password_reset_complete.html
users/templates/users/password_reset_confirm.html
users/templates/users/base.html
users/templates/users/register.html
users/templates/users/password_reset_email.html
users/migrations/0002_alter_customuser_role.py
users/migrations/0003_alter_customuser_role.py
users/migrations/0001_initial.py
InvetoryManager/urls.py
InvetoryManager/wsgi.py
InvetoryManager/settings.py
InvetoryManager/asgi.py
expenses/views.py
expenses/forms.py
expenses/admin.py
expenses/urls.py
expenses/tests.py
expenses/models.py
expenses/apps.py
expenses/templates/expenses/expense_reason_list.html
expenses/templates/expenses/expense_invoice_list.html
expenses/templates/expenses/expense_invoice_form_simple.html
expenses/templates/expenses/expense_reason_form.html
expenses/templates/expenses/expense_invoice_detail.html
expenses/migrations/0001_initial.py

File Contents:
manage.py:
```
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'InvetoryManager.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```

Без_123имени.jpg:
```
Error reading file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte
```

Без_имени.jpg:
```
Error reading file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte
```

views.py:
```
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q, Sum
from django.db import transaction
from django.contrib.auth import get_user_model
from .models import Product, StockTransaction, Category, Supplier, PurchaseInvoice, PurchaseInvoiceItem
from .forms import ProductForm, StockTransactionForm, CategoryForm, SupplierForm, PurchaseInvoiceForm, PurchaseInvoiceItemFormSet

def is_admin(user):
    return user.is_authenticated and user.role == 'admin'

def is_admin_or_manager(user):
    return user.is_authenticated and user.role in ['admin', 'manager']


@login_required
def product_list(request):
    search_query = request.GET.get('search', '')
    category_filter = request.GET.get('category', '')
    low_stock_filter = request.GET.get('low_stock', '')

    products = Product.objects.all()

    if search_query:
        products = products.filter(
            Q(name__icontains=search_query) |
            Q(sku__icontains=search_query) |
            Q(description__icontains=search_query)
        )

    if category_filter:
        products = products.filter(category_id=category_filter)

    if low_stock_filter:
        products = products.filter(quantity__lte=models.F('min_stock'))

    paginator = Paginator(products, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    categories = Category.objects.all()

    context = {
        'products': page_obj,
        'categories': categories,
        'search_query': search_query,
        'category_filter': category_filter,
        'low_stock_filter': low_stock_filter,
    }

    return render(request, 'products/product_list.html', context)


@login_required
@user_passes_test(is_admin_or_manager)
def product_create(request):
    if request.method == 'POST':
        form = ProductForm(request.POST, request.FILES)
        if form.is_valid():
            product = form.save(commit=False)
            product.created_by = request.user
            product.save()
            messages.success(request, 'Товар успешно создан!')
            return redirect('products:list')
    else:
        form = ProductForm()

    return render(request, 'products/product_form.html', {'form': form, 'title': 'Создать товар'})


@login_required
@user_passes_test(is_admin_or_manager)
def product_update(request, pk):
    product = get_object_or_404(Product, pk=pk)

    if request.method == 'POST':
        form = ProductForm(request.POST, request.FILES, instance=product)
        if form.is_valid():
            form.save()
            messages.success(request, 'Товар успешно обновлен!')
            return redirect('products:list')
    else:
        form = ProductForm(instance=product)

    return render(request, 'products/product_form.html', {'form': form, 'title': 'Редактировать товар'})


@login_required
@user_passes_test(is_admin)
def product_delete(request, pk):
    product = get_object_or_404(Product, pk=pk)

    if request.method == 'POST':
        product.delete()
        messages.success(request, 'Товар успешно удален!')
        return redirect('products:list')

    return render(request, 'products/product_confirm_delete.html', {'product': product})


@login_required
@user_passes_test(is_admin_or_manager)
def stock_transaction(request):
    if request.method == 'POST':
        form = StockTransactionForm(request.POST)
        if form.is_valid():
            transaction = form.save(commit=False)
            transaction.user = request.user

            product = transaction.product
            if transaction.transaction_type == 'in':
                product.quantity += transaction.quantity
            else:
                if product.quantity >= transaction.quantity:
                    product.quantity -= transaction.quantity
                else:
                    messages.error(request, 'Недостаточно товара на складе')
                    return render(request, 'products/stock_transaction.html', {'form': form})

            product.save()
            transaction.save()

            messages.success(request, 'Операция успешно выполнена!')
            return redirect('products:list')
    else:
        form = StockTransactionForm()

    return render(request, 'products/stock_transaction.html', {'form': form})


@login_required
def transaction_history(request):
    transactions = StockTransaction.objects.all().select_related('product', 'user')
    return render(request, 'products/transaction_history.html', {'transactions': transactions})


@login_required
@user_passes_test(is_admin_or_manager)
def supplier_list(request):
    """Список поставщиков"""
    suppliers = Supplier.objects.all().order_by('name')
    return render(request, 'products/supplier_list.html', {'suppliers': suppliers})


@login_required
@user_passes_test(is_admin_or_manager)
def supplier_create(request):
    """Создание поставщика"""
    if request.method == 'POST':
        form = SupplierForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Поставщик успешно создан!')
            return redirect('products:supplier_list')
    else:
        form = SupplierForm()

    return render(request, 'products/supplier_form.html', {
        'form': form,
        'title': 'Создать поставщика'
    })


@login_required
@user_passes_test(is_admin_or_manager)
def purchase_invoice_list(request):
    """Список накладных прихода"""
    invoices = PurchaseInvoice.objects.all().select_related('supplier', 'created_by')
    return render(request, 'products/purchase_invoice_list.html', {'invoices': invoices})


@login_required
@user_passes_test(is_admin_or_manager)
def purchase_invoice_create(request):
    """Создание накладной прихода"""
    if request.method == 'POST':
        form = PurchaseInvoiceForm(request.POST)
        formset = PurchaseInvoiceItemFormSet(request.POST)

        if form.is_valid() and formset.is_valid():
            try:
                with transaction.atomic():
                    invoice = form.save(commit=False)
                    invoice.created_by = request.user
                    invoice.save()

                    instances = formset.save(commit=False)
                    for instance in instances:
                        instance.invoice = invoice
                        instance.save()


                    for instance in formset.deleted_objects:
                        instance.delete()

                messages.success(request, 'Накладная прихода успешно создана!')
                return redirect('products:purchase_invoice_list')

            except Exception as e:
                messages.error(request, f'Ошибка при создании накладной: {str(e)}')
    else:

        last_invoice = PurchaseInvoice.objects.order_by('-id').first()
        next_number = f"ПР-{(last_invoice.id + 1) if last_invoice else 1:06d}" if last_invoice else "ПР-000001"

        form = PurchaseInvoiceForm(initial={'invoice_number': next_number})
        formset = PurchaseInvoiceItemFormSet()

    return render(request, 'products/purchase_invoice_form.html', {
        'form': form,
        'formset': formset,
        'title': 'Создать накладную прихода'
    })


@login_required
@user_passes_test(is_admin_or_manager)
def purchase_invoice_detail(request, pk):
    """Просмотр деталей накладной"""
    invoice = get_object_or_404(PurchaseInvoice.objects.prefetch_related('purchaseinvoiceitem_set__product'), pk=pk)
    items = invoice.purchaseinvoiceitem_set.all()

    return render(request, 'products/purchase_invoice_detail.html', {
        'invoice': invoice,
        'items': items
    })


@login_required
@user_passes_test(is_admin_or_manager)
def purchase_invoice_complete(request, pk):
    """Завершение накладной - увеличение остатков"""
    invoice = get_object_or_404(PurchaseInvoice, pk=pk)

    if invoice.status != 'draft':
        messages.error(request, 'Накладная уже обработана или отменена!')
        return redirect('products:purchase_invoice_detail', pk=pk)

    try:
        with transaction.atomic():

            for item in invoice.purchaseinvoiceitem_set.all():
                product = item.product
                product.quantity += item.quantity
                product.save()

                StockTransaction.objects.create(
                    product=product,
                    transaction_type='in',
                    quantity=item.quantity,
                    user=request.user,
                    comment=f'Приход по накладной {invoice.invoice_number}'
                )

            invoice.status = 'completed'
            invoice.save()

        messages.success(request, 'Накладная успешно завершена! Остатки обновлены.')

    except Exception as e:
        messages.error(request, f'Ошибка при завершении накладной: {str(e)}')

    return redirect('products:purchase_invoice_detail', pk=pk)


@login_required
@user_passes_test(is_admin_or_manager)
def purchase_invoice_cancel(request, pk):
    invoice = get_object_or_404(PurchaseInvoice, pk=pk)

    if invoice.status != 'draft':
        messages.error(request, 'Можно отменять только черновики!')
        return redirect('products:purchase_invoice_detail', pk=pk)

    invoice.status = 'cancelled'
    invoice.save()

    messages.success(request, 'Накладная отменена!')
    return redirect('products:purchase_invoice_detail', pk=pk)


@login_required
def transaction_history(request):
    product_filter = request.GET.get('product', '')
    date_from = request.GET.get('date_from', '')
    date_to = request.GET.get('date_to', '')
    user_filter = request.GET.get('user', '')
    transaction_type = request.GET.get('type', '')

    transactions = StockTransaction.objects.all().select_related('product', 'user')

    if product_filter:
        transactions = transactions.filter(product_id=product_filter)

    if date_from:
        transactions = transactions.filter(date__gte=date_from)

    if date_to:
        transactions = transactions.filter(date__lte=date_to)

    if user_filter:
        transactions = transactions.filter(user_id=user_filter)

    if transaction_type:
        transactions = transactions.filter(transaction_type=transaction_type)
    paginator = Paginator(transactions, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    products = Product.objects.all()
    users = get_user_model().objects.filter(stocktransaction__isnull=False).distinct()

    context = {
        'transactions': page_obj,
        'products': products,
        'users': users,
        'product_filter': product_filter,
        'date_from': date_from,
        'date_to': date_to,
        'user_filter': user_filter,
        'transaction_type': transaction_type,
    }

    return render(request, 'products/transaction_history.html', context)
```

forms.py:
```
from django import forms
from .models import Product, StockTransaction, Category,Supplier, PurchaseInvoice, PurchaseInvoiceItem
from django.forms import inlineformset_factory

class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = ['name', 'sku', 'description', 'category', 'unit', 'price', 'min_stock', 'quantity', 'image']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'sku': forms.TextInput(attrs={'class': 'form-control'}),
            'description': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
            'category': forms.Select(attrs={'class': 'form-control'}),
            'unit': forms.Select(attrs={'class': 'form-control'}),
            'price': forms.NumberInput(attrs={'class': 'form-control', 'step': '0.01'}),
            'min_stock': forms.NumberInput(attrs={'class': 'form-control'}),
            'quantity': forms.NumberInput(attrs={'class': 'form-control'}),
            'image': forms.FileInput(attrs={'class': 'form-control'}),
        }

class CategoryForm(forms.ModelForm):
    class Meta:
        model = Category
        fields = ['name', 'description']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'description': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }

class StockTransactionForm(forms.ModelForm):
    class Meta:
        model = StockTransaction
        fields = ['product', 'transaction_type', 'quantity', 'comment']
        widgets = {
            'product': forms.Select(attrs={'class': 'form-control'}),
            'transaction_type': forms.Select(attrs={'class': 'form-control'}),
            'quantity': forms.NumberInput(attrs={'class': 'form-control'}),
            'comment': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }

class SupplierForm(forms.ModelForm):
    class Meta:
        model = Supplier
        fields = ['name', 'contact_person', 'phone', 'email', 'address']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'contact_person': forms.TextInput(attrs={'class': 'form-control'}),
            'phone': forms.TextInput(attrs={'class': 'form-control'}),
            'email': forms.EmailInput(attrs={'class': 'form-control'}),
            'address': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }

class PurchaseInvoiceForm(forms.ModelForm):
    class Meta:
        model = PurchaseInvoice
        fields = ['invoice_number', 'supplier', 'invoice_date', 'comment']
        widgets = {
            'invoice_number': forms.TextInput(attrs={'class': 'form-control'}),
            'supplier': forms.Select(attrs={'class': 'form-control'}),
            'invoice_date': forms.DateInput(attrs={'class': 'form-control', 'type': 'date'}),
            'comment': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }

class PurchaseInvoiceItemForm(forms.ModelForm):
    class Meta:
        model = PurchaseInvoiceItem
        fields = ['product', 'quantity', 'purchase_price']
        widgets = {
            'product': forms.Select(attrs={'class': 'form-control product-select'}),
            'quantity': forms.NumberInput(attrs={'class': 'form-control quantity'}),
            'purchase_price': forms.NumberInput(attrs={'class': 'form-control price', 'step': '0.01'}),
        }

PurchaseInvoiceItemFormSet = inlineformset_factory(
    PurchaseInvoice,
    PurchaseInvoiceItem,
    form=PurchaseInvoiceItemForm,
    extra=1,
    can_delete=True
)
```

admin.py:
```
from django.contrib import admin
from .models import Product, StockTransaction, Category, Supplier, PurchaseInvoice, PurchaseInvoiceItem

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'description']
    search_fields = ['name']

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = ['name', 'sku', 'category', 'price', 'quantity', 'min_stock', 'unit', 'created_at']
    list_filter = ['category', 'unit', 'created_at']
    search_fields = ['name', 'sku', 'description']
    readonly_fields = ['created_at', 'updated_at']

@admin.register(StockTransaction)
class StockTransactionAdmin(admin.ModelAdmin):
    list_display = ['product', 'transaction_type', 'quantity', 'date', 'user']
    list_filter = ['transaction_type', 'date']
    search_fields = ['product__name', 'user__email']


@admin.register(Supplier)
class SupplierAdmin(admin.ModelAdmin):
    list_display = ['name', 'contact_person', 'phone', 'email', 'created_at']
    search_fields = ['name', 'contact_person', 'phone']
    list_filter = ['created_at']

class PurchaseInvoiceItemInline(admin.TabularInline):
    model = PurchaseInvoiceItem
    extra = 1
    fields = ['product', 'quantity', 'purchase_price', 'total_price']
    readonly_fields = ['total_price']

@admin.register(PurchaseInvoice)
class PurchaseInvoiceAdmin(admin.ModelAdmin):
    list_display = ['invoice_number', 'supplier', 'invoice_date', 'status', 'total_amount', 'created_by']
    list_filter = ['status', 'invoice_date', 'supplier']
    search_fields = ['invoice_number', 'supplier__name']
    readonly_fields = ['total_amount', 'created_at', 'updated_at']
    inlines = [PurchaseInvoiceItemInline]
    fieldsets = (
        (None, {
            'fields': ('invoice_number', 'supplier', 'invoice_date', 'status')
        }),
        ('Финансы', {
            'fields': ('total_amount',)
        }),
        ('Дополнительно', {
            'fields': ('comment', 'created_by', 'created_at', 'updated_at')
        }),
    )

@admin.register(PurchaseInvoiceItem)
class PurchaseInvoiceItemAdmin(admin.ModelAdmin):
    list_display = ['invoice', 'product', 'quantity', 'purchase_price', 'total_price']
    list_filter = ['invoice__supplier', 'invoice__invoice_date']
    search_fields = ['product__name', 'invoice__invoice_number']
```

urls.py:
```
from django.urls import path
from . import views

app_name = 'products'

urlpatterns = [
    path('', views.product_list, name='list'),
    path('create/', views.product_create, name='create'),
    path('<int:pk>/update/', views.product_update, name='update'),
    path('<int:pk>/delete/', views.product_delete, name='delete'),
    path('transaction/', views.stock_transaction, name='transaction'),
    path('history/', views.transaction_history, name='history'),
    path('suppliers/', views.supplier_list, name='supplier_list'),
    path('suppliers/create/', views.supplier_create, name='supplier_create'),

    path('purchase-invoices/', views.purchase_invoice_list, name='purchase_invoice_list'),
    path('purchase-invoices/create/', views.purchase_invoice_create, name='purchase_invoice_create'),
    path('purchase-invoices/<int:pk>/', views.purchase_invoice_detail, name='purchase_invoice_detail'),
    path('purchase-invoices/<int:pk>/complete/', views.purchase_invoice_complete, name='purchase_invoice_complete'),
    path('purchase-invoices/<int:pk>/cancel/', views.purchase_invoice_cancel, name='purchase_invoice_cancel'),
]
```

tests.py:
```
from django.test import TestCase

# Create your tests here.

```

models.py:
```
from django.db import models
from django.contrib.auth import get_user_model
from PIL import Image

User = get_user_model()

class Category(models.Model):
    name = models.CharField(max_length=255, verbose_name='Название категории')
    description = models.TextField(blank=True, verbose_name='Описание')

    class Meta:
        verbose_name = 'Категория'
        verbose_name_plural = 'Категории'

    def __str__(self):
        return self.name


class Product(models.Model):
    UNIT_CHOICES = [
        ('шт', 'шт'),
        ('кг', 'Килограммы'),
        ('м', 'Метры'),
    ]

    name = models.CharField(max_length=255, verbose_name='Название')
    sku = models.CharField(max_length=100, unique=True, verbose_name='Артикул (SKU)')
    description = models.TextField(blank=True, verbose_name='Описание')
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True, verbose_name='Категория')
    unit = models.CharField(max_length=10, choices=UNIT_CHOICES, default='шт', verbose_name='Единица измерения')
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Цена за единицу')
    min_stock = models.PositiveIntegerField(default=0, verbose_name='Минимальный запас')
    quantity = models.PositiveIntegerField(default=0, verbose_name='Текущий остаток')
    image = models.ImageField(upload_to='products/', blank=True, null=True, verbose_name='Фото')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='Дата обновления')
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name='Создал')

    class Meta:
        verbose_name = 'Товар'
        verbose_name_plural = 'Товары'
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.name} ({self.sku})"

    def is_low_stock(self):
        return self.quantity <= self.min_stock

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

        if self.image:
            img = Image.open(self.image.path)
            max_size = (150, 150)
            img.thumbnail(max_size, Image.Resampling.LANCZOS)
            img.save(self.image.path)

class StockTransaction(models.Model):
    TRANSACTION_TYPES = [
        ('in', 'Приход'),
        ('out', 'Расход'),
    ]

    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name='Товар')
    transaction_type = models.CharField(max_length=3, choices=TRANSACTION_TYPES, verbose_name='Тип операции')
    quantity = models.IntegerField(verbose_name='Количество')
    date = models.DateTimeField(auto_now_add=True, verbose_name='Дата операции')
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name='Пользователь')
    comment = models.TextField(blank=True, verbose_name='Комментарий')

    class Meta:
        verbose_name = 'Операция с товаром'
        verbose_name_plural = 'Операции с товарами'
        ordering = ['-date']

    def __str__(self):
        return f"{self.get_transaction_type_display()} {self.product.name} - {self.quantity}"


class Supplier(models.Model):
    name = models.CharField(max_length=255, verbose_name='Название поставщика')
    contact_person = models.CharField(max_length=255, blank=True, verbose_name='Контактное лицо')
    phone = models.CharField(max_length=20, blank=True, verbose_name='Телефон')
    email = models.EmailField(blank=True, verbose_name='Email')
    address = models.TextField(blank=True, verbose_name='Адрес')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')

    class Meta:
        verbose_name = 'Поставщик'
        verbose_name_plural = 'Поставщики'
        ordering = ['name']

    def __str__(self):
        return self.name


class PurchaseInvoice(models.Model):
    STATUS_CHOICES = [
        ('draft', 'Черновик'),
        ('completed', 'Завершена'),
        ('cancelled', 'Отменена'),
    ]

    invoice_number = models.CharField(max_length=50, unique=True, verbose_name='Номер накладной')
    supplier = models.ForeignKey(Supplier, on_delete=models.PROTECT, verbose_name='Поставщик')
    invoice_date = models.DateField(verbose_name='Дата накладной')
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='draft', verbose_name='Статус')
    total_amount = models.DecimalField(max_digits=12, decimal_places=2, default=0, verbose_name='Общая сумма')
    comment = models.TextField(blank=True, verbose_name='Комментарий')
    created_by = models.ForeignKey(User, on_delete=models.PROTECT, verbose_name='Создал')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='Дата обновления')

    class Meta:
        verbose_name = 'Накладная прихода'
        verbose_name_plural = 'Накладные прихода'
        ordering = ['-invoice_date', '-created_at']

    def __str__(self):
        return f"Накладная {self.invoice_number} от {self.invoice_date}"

    def update_total_amount(self):
        total = self.purchaseinvoiceitem_set.aggregate(
            total=models.Sum(models.F('quantity') * models.F('purchase_price'))
        )['total'] or 0
        self.total_amount = total
        self.save()


class PurchaseInvoiceItem(models.Model):
    invoice = models.ForeignKey(PurchaseInvoice, on_delete=models.CASCADE, verbose_name='Накладная')
    product = models.ForeignKey(Product, on_delete=models.PROTECT, verbose_name='Товар')
    quantity = models.PositiveIntegerField(verbose_name='Количество')
    purchase_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Цена закупки')
    total_price = models.DecimalField(max_digits=10, decimal_places=2, editable=False, verbose_name='Общая стоимость')

    class Meta:
        verbose_name = 'Строка накладной'
        verbose_name_plural = 'Строки накладной'
        unique_together = ['invoice', 'product']

    def __str__(self):
        return f"{self.product.name} - {self.quantity} {self.product.get_unit_display()}"

    def save(self, *args, **kwargs):
        self.total_price = self.quantity * self.purchase_price
        super().save(*args, **kwargs)

        self.invoice.update_total_amount()

    def delete(self, *args, **kwargs):
        invoice = self.invoice
        super().delete(*args, **kwargs)
        invoice.update_total_amount()
```

apps.py:
```
from django.apps import AppConfig


class ProductsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'products'

```

supplier_form.html:
```
{% extends "users/base.html" %}

{% block title %}{{ title }}{% endblock %}

{% block content %}
<div>
    <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">{{ title }}</h2>
        <form method="post">
            {% csrf_token %}
            <div class="space-y-4">
                {% for field in form %}
                <div>
                    <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                        {{ field.label }}
                    </label>
                    {{ field }}
                    {% if field.errors %}
                    <p class="text-red-500 text-xs italic mt-1">{{ field.errors.0 }}</p>
                    {% endif %}
                </div>
                {% endfor %}
            </div>

            <div class="flex items-center justify-between mt-8 pt-6 border-t border-gray-200">
                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg transition duration-200">
                    Сохранить
                </button>
                <a href="{% url 'products:supplier_list' %}" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-lg transition duration-200">
                    Отмена
                </a>
            </div>
        </form>
    </div>
</div>
{% endblock %}
```

supplier_list.html:
```
{% extends "users/base.html" %}

{% block title %}Список поставщиков{% endblock %}

{% block content %}
<div>
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800">Список поставщиков</h2>
        <a href="{% url 'products:supplier_create' %}" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-200">
            Добавить поставщика
        </a>
    </div>

    <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <table class="min-w-full">
            <thead class="bg-gray-50">
                <tr>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Название</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Контактное лицо</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Телефон</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Дата создания</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                {% for supplier in suppliers %}
                <tr class="hover:bg-gray-50 transition duration-150">
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">{{ supplier.name }}</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{{ supplier.contact_person|default:"-" }}</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{{ supplier.phone|default:"-" }}</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{{ supplier.email|default:"-" }}</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{{ supplier.created_at|date:"d.m.Y" }}</div>
                    </td>
                </tr>
                {% empty %}
                <tr>
                    <td colspan="5" class="py-8 px-4 text-center">
                        <div class="text-gray-500 text-lg">Поставщики не найдены</div>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
{% endblock %}
```

product_list.html:
```
{% extends "users/base.html" %}

{% block title %}Список товаров{% endblock %}

{% block content %}
<div class="">
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800">Список товаров</h2>
        {% if user.role == 'admin' or user.role == 'manager' %}
        <a href="{% url 'products:create' %}" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-200">
            Добавить товар
        </a>
        {% endif %}
    </div>

    <div class="bg-white p-6 rounded-lg shadow-md mb-6">
        <form method="get" class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Поиск</label>
                <input type="text" name="search" value="{{ search_query }}"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="Название, артикул...">
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Категория</label>
                <select name="category" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">Все категории</option>
                    {% for category in categories %}
                    <option value="{{ category.id }}" {% if category_filter == category.id|stringformat:"i" %}selected{% endif %}>
                        {{ category.name }}
                    </option>
                    {% endfor %}
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Статус</label>
                <select name="low_stock" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">Все товары</option>
                    <option value="true" {% if low_stock_filter %}selected{% endif %}>Низкий запас</option>
                </select>
            </div>
            <div class="flex items-end">
                <button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md transition duration-200">
                    Применить
                </button>
            </div>
        </form>
    </div>

    <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Фото</th>
                        <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Название</th>
                        <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Артикул</th>
                        <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Категория</th>
                        <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Цена</th>
                        <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Остаток</th>
                        <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Мин. запас</th>
                        <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ед. изм.</th>
                        <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Дата создания</th>
                        {% if user.role == 'admin' or user.role == 'manager' %}
                        <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Действия</th>
                        {% endif %}
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    {% for product in products %}
                    <tr class="{% if product.is_low_stock %}bg-red-50 hover:bg-red-100{% else %}hover:bg-gray-50{% endif %} transition duration-150">
                        <td class="py-3 px-4 whitespace-nowrap">
                            <div class="flex justify-center">
                                {% if product.image %}
                                <img src="{{ product.image.url }}" alt="{{ product.name }}"
                                     class="w-12 h-12 object-cover rounded-lg border border-gray-300">
                                {% else %}
                                <div class="w-12 h-12 bg-gray-100 rounded-lg border border-gray-300 flex items-center justify-center">
                                    <span class="text-gray-400 text-xs">Нет фото</span>
                                </div>
                                {% endif %}
                            </div>
                        </td>
                        <td class="py-3 px-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-gray-900">{{ product.name }}</div>
                        </td>
                        <td class="py-3 px-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900 font-mono">{{ product.sku }}</div>
                        </td>
                        <td class="py-3 px-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">{{ product.category.name|default:"-" }}</div>
                        </td>
                        <td class="py-3 px-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">{{ product.price }} ₽</div>
                        </td>
                        <td class="py-3 px-4 whitespace-nowrap">
                            <div class="text-sm font-medium {% if product.is_low_stock %}text-red-600{% else %}text-gray-900{% endif %}">
                                {{ product.quantity }}
                            </div>
                        </td>
                        <td class="py-3 px-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">{{ product.min_stock }}</div>
                        </td>
                        <td class="py-3 px-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">{{ product.get_unit_display }}</div>
                        </td>
                        <td class="py-3 px-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">{{ product.created_at|date:"d.m.Y H:i" }}</div>
                        </td>
                        {% if user.role == 'admin' or user.role == 'manager' %}
                        <td class="py-3 px-4 whitespace-nowrap">
                            <div class="flex space-x-2">
                                <a href="{% url 'products:update' product.pk %}"
                                   class="text-blue-600 hover:text-blue-800 text-sm font-medium transition duration-150">
                                    Редактировать
                                </a>
                                {% if user.role == 'admin' %}
                                <span class="text-gray-300">|</span>
                                <a href="{% url 'products:delete' product.pk %}"
                                   class="text-red-600 hover:text-red-800 text-sm font-medium transition duration-150">
                                    Удалить
                                </a>
                                {% endif %}
                            </div>
                        </td>
                        {% endif %}
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="{% if user.role == 'admin' or user.role == 'manager' %}10{% else %}9{% endif %}" class="py-8 px-4 text-center">
                            <div class="text-gray-500 text-lg">Товары не найдены</div>
                            {% if search_query or category_filter or low_stock_filter %}
                            <p class="text-sm text-gray-400 mt-2">Попробуйте изменить параметры поиска</p>
                            {% endif %}
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    {% if products.has_other_pages %}
    <div class="mt-6 flex justify-center">
        <nav class="inline-flex rounded-md shadow-sm">
            {% if products.has_previous %}
            <a href="?page={{ products.previous_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}{% if category_filter %}&category={{ category_filter }}{% endif %}{% if low_stock_filter %}&low_stock={{ low_stock_filter }}{% endif %}"
               class="px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 rounded-l-md transition duration-150">
                Назад
            </a>
            {% endif %}

            {% for num in products.paginator.page_range %}
            {% if products.number == num %}
            <span class="px-4 py-2 border border-gray-300 bg-blue-500 text-white text-sm font-medium">
                {{ num }}
            </span>
            {% else %}
            <a href="?page={{ num }}{% if search_query %}&search={{ search_query }}{% endif %}{% if category_filter %}&category={{ category_filter }}{% endif %}{% if low_stock_filter %}&low_stock={{ low_stock_filter }}{% endif %}"
               class="px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 transition duration-150">
                {{ num }}
            </a>
            {% endif %}
            {% endfor %}

            {% if products.has_next %}
            <a href="?page={{ products.next_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}{% if category_filter %}&category={{ category_filter }}{% endif %}{% if low_stock_filter %}&low_stock={{ low_stock_filter }}{% endif %}"
               class="px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 rounded-r-md transition duration-150">
                Вперед
            </a>
            {% endif %}
        </nav>
    </div>
    {% endif %}
</div>
{% endblock %}
```

stock_transaction.html:
```
{% extends "users/base.html" %}

{% block title %}Операция с товаром{% endblock %}

{% block content %}
<h2>Приход/расход товара</h2>

<form method="post">
    {% csrf_token %}
    
    {% for field in form %}
    <div class="mb-4">
        <label for="{{ field.id_for_label }}" class="block text-gray-700 text-sm font-bold mb-2">
            {{ field.label }}
        </label>
        {{ field }}
        {% if field.errors %}
        <p class="text-red-500 text-xs italic">{{ field.errors.0 }}</p>
        {% endif %}
    </div>
    {% endfor %}
    
    <div class="flex items-center justify-between mt-6">
        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
            Сохранить
        </button>
        <a href="{% url 'products:list' %}" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
            Отмена
        </a>
    </div>
</form>
{% endblock %}
```

purchase_invoice_list.html:
```
{% extends "users/base.html" %}

{% block title %}Накладные прихода{% endblock %}

{% block content %}
<div>
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800">Накладные прихода</h2>
        <a href="{% url 'products:purchase_invoice_create' %}" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-200">
            Создать накладную
        </a>
    </div>

    <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <table class="min-w-full">
            <thead class="bg-gray-50">
                <tr>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Номер</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Поставщик</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Дата</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Статус</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Сумма</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Создал</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Действия</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                {% for invoice in invoices %}
                <tr class="hover:bg-gray-50 transition duration-150">
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">{{ invoice.invoice_number }}</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{{ invoice.supplier.name }}</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{{ invoice.invoice_date|date:"d.m.Y" }}</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <span class="px-2 py-1 text-xs rounded-full 
                            {% if invoice.status == 'draft' %}bg-yellow-100 text-yellow-800
                            {% elif invoice.status == 'completed' %}bg-green-100 text-green-800
                            {% else %}bg-red-100 text-red-800{% endif %}">
                            {{ invoice.get_status_display }}
                        </span>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">{{ invoice.total_amount }} ₽</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{{ invoice.created_by.get_full_name }}</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="flex space-x-2">
                            <a href="{% url 'products:purchase_invoice_detail' invoice.pk %}" 
                               class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                                Просмотр
                            </a>
                            {% if invoice.status == 'draft' %}
                            <span class="text-gray-300">|</span>
                            <a href="{% url 'products:purchase_invoice_complete' invoice.pk %}" 
                               class="text-green-600 hover:text-green-800 text-sm font-medium"
                               onclick="return confirm('Завершить накладную? Остатки будут обновлены.')">
                                Завершить
                            </a>
                            <span class="text-gray-300">|</span>
                            <a href="{% url 'products:purchase_invoice_cancel' invoice.pk %}" 
                               class="text-red-600 hover:text-red-800 text-sm font-medium"
                               onclick="return confirm('Отменить накладную?')">
                                Отменить
                            </a>
                            {% endif %}
                        </div>
                    </td>
                </tr>
                {% empty %}
                <tr>
                    <td colspan="7" class="py-8 px-4 text-center">
                        <div class="text-gray-500 text-lg">Накладные не найдены</div>
                        <a href="{% url 'products:purchase_invoice_create' %}" class="text-blue-600 hover:text-blue-800 mt-2 inline-block">
                            Создать первую накладную
                        </a>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
{% endblock %}
```

purchase_invoice_form.html:
```
{% extends "users/base.html" %}

{% block title %}{{ title }}{% endblock %}

{% block content %}
<div>
    <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">{{ title }}</h2>
        
        <form method="post" id="invoice-form">
            {% csrf_token %}

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                <div>
                    <label for="{{ form.invoice_number.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                        {{ form.invoice_number.label }} *
                    </label>
                    {{ form.invoice_number }}
                </div>
                
                <div>
                    <label for="{{ form.supplier.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                        {{ form.supplier.label }} *
                    </label>
                    {{ form.supplier }}
                </div>
                
                <div>
                    <label for="{{ form.invoice_date.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                        {{ form.invoice_date.label }} *
                    </label>
                    {{ form.invoice_date }}
                </div>
                
                <div class="md:col-span-2">
                    <label for="{{ form.comment.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                        {{ form.comment.label }}
                    </label>
                    {{ form.comment }}
                </div>
            </div>
            <h3 class="text-lg font-semibold text-gray-800 mb-4">Товары</h3>
            <div id="formset-container">
                {{ formset.management_form }}
                
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-gray-50 rounded-lg">
                        <thead>
                            <tr class="bg-gray-100">
                                <th class="py-2 px-4 text-left">Товар</th>
                                <th class="py-2 px-4 text-left">Количество</th>
                                <th class="py-2 px-4 text-left">Цена закупки</th>
                                <th class="py-2 px-4 text-left">Сумма</th>
                                <th class="py-2 px-4 text-left">Действие</th>
                            </tr>
                        </thead>
                        <tbody id="formset-tbody">
                            {% for form in formset %}
                            <tr class="formset-row border-b border-gray-200">
                                <td class="py-2 px-4">{{ form.product }}{{ form.id }}</td>
                                <td class="py-2 px-4">{{ form.quantity }}</td>
                                <td class="py-2 px-4">{{ form.purchase_price }}</td>
                                <td class="py-2 px-4">
                                    <span class="row-total">0.00</span> ₽
                                </td>
                                <td class="py-2 px-4">
                                    {% if formset.can_delete %}
                                    {{ form.DELETE }} <label for="{{ form.DELETE.id_for_label }}">Удалить</label>
                                    {% endif %}
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="mt-6 p-4 bg-gray-50 rounded-lg">
                <div class="flex justify-between items-center">
                    <span class="text-lg font-semibold">Общая сумма:</span>
                    <span id="total-amount" class="text-xl font-bold text-blue-600">0.00 ₽</span>
                </div>
            </div>

            <div class="flex items-center justify-between mt-8 pt-6 border-t border-gray-200">
                <button type="button" id="add-row" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg">
                    Добавить строку
                </button>
                
                <div class="flex space-x-4">
                    <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg">
                        Сохранить накладную
                    </button>
                    <a href="{% url 'products:purchase_invoice_list' %}" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-lg">
                        Отмена
                    </a>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    function calculateRowTotal(row) {
        const quantity = parseFloat(row.querySelector('.quantity').value) || 0;
        const price = parseFloat(row.querySelector('.price').value) || 0;
        const total = quantity * price;
        row.querySelector('.row-total').textContent = total.toFixed(2);
        return total;
    }

    function calculateTotal() {
        let total = 0;
        document.querySelectorAll('.formset-row').forEach(row => {
            if (!row.querySelector('input[name$="-DELETE"]').checked) {
                total += calculateRowTotal(row);
            }
        });
        document.getElementById('total-amount').textContent = total.toFixed(2) + ' ₽';
    }

    document.querySelectorAll('.quantity, .price').forEach(input => {
        input.addEventListener('input', calculateTotal);
    });

    document.querySelectorAll('input[name$="-DELETE"]').forEach(checkbox => {
        checkbox.addEventListener('change', calculateTotal);
    });
    document.getElementById('add-row').addEventListener('click', function() {
        alert('Для полной реализации нужно добавить JavaScript для динамического добавления строк формсета');
    });

    calculateTotal();
});
</script>
{% endblock %}
```

purchase_invoice_detail.html:
```
{% extends "users/base.html" %}

{% block title %}Накладная {{ invoice.invoice_number }}{% endblock %}

{% block content %}
<div>
    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h2 class="text-2xl font-bold text-gray-800">Накладная {{ invoice.invoice_number }}</h2>
                <p class="text-gray-600">от {{ invoice.invoice_date|date:"d.m.Y" }}</p>
            </div>
            <span class="px-3 py-1 text-sm rounded-full 
                {% if invoice.status == 'draft' %}bg-yellow-100 text-yellow-800
                {% elif invoice.status == 'completed' %}bg-green-100 text-green-800
                {% else %}bg-red-100 text-red-800{% endif %}">
                {{ invoice.get_status_display }}
            </span>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div>
                <h3 class="text-lg font-semibold mb-2">Информация о поставщике</h3>
                <p><strong>Поставщик:</strong> {{ invoice.supplier.name }}</p>
                {% if invoice.supplier.contact_person %}
                <p><strong>Контактное лицо:</strong> {{ invoice.supplier.contact_person }}</p>
                {% endif %}
                {% if invoice.supplier.phone %}
                <p><strong>Телефон:</strong> {{ invoice.supplier.phone }}</p>
                {% endif %}
            </div>
            
            <div>
                <h3 class="text-lg font-semibold mb-2">Информация о накладной</h3>
                <p><strong>Создал:</strong> {{ invoice.created_by.get_full_name }}</p>
                <p><strong>Дата создания:</strong> {{ invoice.created_at|date:"d.m.Y H:i" }}</p>
                <p><strong>Общая сумма:</strong> <span class="font-bold text-lg">{{ invoice.total_amount }} ₽</span></p>
            </div>
        </div>

        <h3 class="text-lg font-semibold mb-4">Товары в накладной</h3>
        <div class="overflow-x-auto">
            <table class="min-w-full bg-white rounded-lg">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="py-3 px-4 text-left">Товар</th>
                        <th class="py-3 px-4 text-left">Артикул</th>
                        <th class="py-3 px-4 text-left">Количество</th>
                        <th class="py-3 px-4 text-left">Цена закупки</th>
                        <th class="py-3 px-4 text-left">Сумма</th>
                    </tr>
                </thead>
                <tbody>
                    {% for item in items %}
                    <tr class="border-b border-gray-200">
                        <td class="py-3 px-4">{{ item.product.name }}</td>
                        <td class="py-3 px-4 font-mono">{{ item.product.sku }}</td>
                        <td class="py-3 px-4">{{ item.quantity }} {{ item.product.get_unit_display }}</td>
                        <td class="py-3 px-4">{{ item.purchase_price }} ₽</td>
                        <td class="py-3 px-4 font-medium">{{ item.total_price }} ₽</td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="5" class="py-4 px-4 text-center text-gray-500">
                            Нет товаров в накладной
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
                <tfoot>
                    <tr class="bg-gray-50">
                        <td colspan="4" class="py-3 px-4 text-right font-semibold">Итого:</td>
                        <td class="py-3 px-4 font-bold text-lg">{{ invoice.total_amount }} ₽</td>
                    </tr>
                </tfoot>
            </table>
        </div>
        {% if invoice.comment %}
        <div class="mt-6">
            <h3 class="text-lg font-semibold mb-2">Комментарий</h3>
            <p class="text-gray-700">{{ invoice.comment }}</p>
        </div>
        {% endif %}
        <div class="flex justify-between items-center mt-8 pt-6 border-t border-gray-200">
            <a href="{% url 'products:purchase_invoice_list' %}" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-lg">
                Назад к списку
            </a>
            
            {% if invoice.status == 'draft' %}
            <div class="flex space-x-4">
                <a href="{% url 'products:purchase_invoice_complete' invoice.pk %}" 
                   class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-6 rounded-lg"
                   onclick="return confirm('Завершить накладную? Остатки товаров будут увеличены.')">
                    Завершить накладную
                </a>
                <a href="{% url 'products:purchase_invoice_cancel' invoice.pk %}" 
                   class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-6 rounded-lg"
                   onclick="return confirm('Отменить накладную?')">
                    Отменить
                </a>
            </div>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}
```

product_confirm_delete.html:
```
{% extends "users/base.html" %}

{% block title %}Удаление товара{% endblock %}

{% block content %}
<h2 class="text-2xl font-bold mb-6">Удаление товара</h2>

<p class="mb-4">Вы уверены, что хотите удалить товар "{{ product.name }}"?</p>

<form method="post">
    {% csrf_token %}
    <div class="flex items-center justify-between mt-6">
        <button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
            Удалить
        </button>
        <a href="{% url 'products:list' %}" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
            Отмена
        </a>
    </div>
</form>
{% endblock %}
```

product_form.html:
```
{% extends "users/base.html" %}

{% block title %}{{ title }}{% endblock %}

{% block content %}
<div class="">
    <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">{{ title }}</h2>
        <form method="post" enctype="multipart/form-data">
            {% csrf_token %}
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="space-y-4">
                    <div>
                        <label for="{{ form.name.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                            {{ form.name.label }} *
                        </label>
                        {{ form.name }}
                        {% if form.name.errors %}
                        <p class="text-red-500 text-xs italic mt-1">{{ form.name.errors.0 }}</p>
                        {% endif %}
                    </div>

                    <div>
                        <label for="{{ form.sku.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                            {{ form.sku.label }} *
                        </label>
                        {{ form.sku }}
                        {% if form.sku.errors %}
                        <p class="text-red-500 text-xs italic mt-1">{{ form.sku.errors.0 }}</p>
                        {% endif %}
                    </div>

                    <div>
                        <label for="{{ form.category.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                            {{ form.category.label }}
                        </label>
                        {{ form.category }}
                        {% if form.category.errors %}
                        <p class="text-red-500 text-xs italic mt-1">{{ form.category.errors.0 }}</p>
                        {% endif %}
                    </div>

                    <div>
                        <label for="{{ form.unit.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                            {{ form.unit.label }} *
                        </label>
                        {{ form.unit }}
                        {% if form.unit.errors %}
                        <p class="text-red-500 text-xs italic mt-1">{{ form.unit.errors.0 }}</p>
                        {% endif %}
                    </div>
                </div>

                <div class="space-y-4">

                    <div>
                        <label for="{{ form.price.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                            {{ form.price.label }} *
                        </label>
                        {{ form.price }}
                        {% if form.price.errors %}
                        <p class="text-red-500 text-xs italic mt-1">{{ form.price.errors.0 }}</p>
                        {% endif %}

                    <div>
                        <label for="{{ form.quantity.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                            {{ form.quantity.label }} *
                        </label>
                        {{ form.quantity }}
                        {% if form.quantity.errors %}
                        <p class="text-red-500 text-xs italic mt-1">{{ form.quantity.errors.0 }}</p>
                        {% endif %}
                    </div>

                    <div>
                        <label for="{{ form.min_stock.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                            {{ form.min_stock.label }} *
                        </label>
                        {{ form.min_stock }}
                        {% if form.min_stock.errors %}
                        <p class="text-red-500 text-xs italic mt-1">{{ form.min_stock.errors.0 }}</p>
                        {% endif %}
                    </div>

                    <div>
                        <label for="{{ form.image.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                            {{ form.image.label }}
                        </label>
                        {{ form.image }}
                        {% if form.image.errors %}
                        <p class="text-red-500 text-xs italic mt-1">{{ form.image.errors.0 }}</p>
                        {% endif %}

                        {% if form.instance.image %}
                        <div class="mt-3 p-2 border border-gray-200 rounded-lg">
                            <p class="text-sm text-gray-600 mb-2">Текущее изображение:</p>
                            <img src="{{ form.instance.image.url }}" alt="{{ form.instance.name }}"
                                 class="w-32 h-32 object-cover rounded-lg mx-auto">
                        </div>
                        {% endif %}
                    </div>
                </div>
            </div>
            <div class="mt-6">
                <label for="{{ form.description.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                    {{ form.description.label }}
                </label>
                {{ form.description }}
                {% if form.description.errors %}
                <p class="text-red-500 text-xs italic mt-1">{{ form.description.errors.0 }}</p>
                {% endif %}
            </div>

            <div class="flex items-center justify-between mt-8 pt-6 border-t border-gray-200">
                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg transition duration-200">
                    Сохранить товар
                </button>
                <a href="{% url 'products:list' %}" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-lg transition duration-200">
                    Отмена
                </a>
            </div>
        </form>
    </div>
</div>
{% endblock %}
```

transaction_history.html:
```
{% extends "users/base.html" %}

{% block title %}История операций{% endblock %}

{% block content %}
<h2>История операций с товарами</h2>

<div class="overflow-x-auto">
    <table class="min-w-full bg-white border border-gray-200">
        <thead>
            <tr>
                <th class="py-2 px-4 border-b">Дата</th>
                <th class="py-2 px-4 border-b">Товар</th>
                <th class="py-2 px-4 border-b">Тип операции</th>
                <th class="py-2 px-4 border-b">Количество</th>
                <th class="py-2 px-4 border-b">Пользователь</th>
                <th class="py-2 px-4 border-b">Комментарий</th>
            </tr>
        </thead>
        <tbody>
            {% for transaction in transactions %}
            <tr>
                <td class="py-2 px-4 border-b">{{ transaction.date|date:"d.m.Y H:i" }}</td>
                <td class="py-2 px-4 border-b">{{ transaction.product.name }}</td>
                <td class="py-2 px-4 border-b">{{ transaction.get_transaction_type_display }}</td>
                <td class="py-2 px-4 border-b">{{ transaction.quantity }}</td>
                <td class="py-2 px-4 border-b">{{ transaction.user.get_full_name }}</td>
                <td class="py-2 px-4 border-b">{{ transaction.comment }}</td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="6" class="py-4 px-4 text-center">Операции не найдены</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}
```

0001_initial.py:
```
# Generated by Django 5.0.7 on 2025-09-19 10:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='Количество')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Создал')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['-created_at'],
            },
        ),
    ]

```

0003_category_product_image_product_min_stock_product_sku_and_more.py:
```
# Generated by Django 5.2.6 on 2025-09-25 15:40

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0002_stocktransaction'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название категории')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to='products/', verbose_name='Фото'),
        ),
        migrations.AddField(
            model_name='product',
            name='min_stock',
            field=models.PositiveIntegerField(default=0, verbose_name='Минимальный запас'),
        ),
        migrations.AddField(
            model_name='product',
            name='sku',
            field=models.CharField(default=1, max_length=100, unique=True, verbose_name='Артикул (SKU)'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='product',
            name='unit',
            field=models.CharField(choices=[('шт', 'Штуки'), ('кг', 'Килограммы'), ('м', 'Метры')], default='шт', max_length=10, verbose_name='Единица измерения'),
        ),
        migrations.AlterField(
            model_name='product',
            name='price',
            field=models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена за единицу'),
        ),
        migrations.AlterField(
            model_name='product',
            name='quantity',
            field=models.PositiveIntegerField(default=0, verbose_name='Текущий остаток'),
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.category', verbose_name='Категория'),
        ),
    ]

```

0004_supplier_purchaseinvoice_purchaseinvoiceitem.py:
```
# Generated by Django 5.2.6 on 2025-09-25 16:54

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0003_category_product_image_product_min_stock_product_sku_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название поставщика')),
                ('contact_person', models.CharField(blank=True, max_length=255, verbose_name='Контактное лицо')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('address', models.TextField(blank=True, verbose_name='Адрес')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Поставщик',
                'verbose_name_plural': 'Поставщики',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(max_length=50, unique=True, verbose_name='Номер накладной')),
                ('invoice_date', models.DateField(verbose_name='Дата накладной')),
                ('status', models.CharField(choices=[('draft', 'Черновик'), ('completed', 'Завершена'), ('cancelled', 'Отменена')], default='draft', max_length=10, verbose_name='Статус')),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Общая сумма')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Создал')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.supplier', verbose_name='Поставщик')),
            ],
            options={
                'verbose_name': 'Накладная прихода',
                'verbose_name_plural': 'Накладные прихода',
                'ordering': ['-invoice_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseInvoiceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='Количество')),
                ('purchase_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена закупки')),
                ('total_price', models.DecimalField(decimal_places=2, editable=False, max_digits=10, verbose_name='Общая стоимость')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.purchaseinvoice', verbose_name='Накладная')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Строка накладной',
                'verbose_name_plural': 'Строки накладной',
                'unique_together': {('invoice', 'product')},
            },
        ),
    ]

```

0002_stocktransaction.py:
```
# Generated by Django 5.0.7 on 2025-09-19 10:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StockTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('in', 'Приход'), ('out', 'Расход')], max_length=3, verbose_name='Тип операции')),
                ('quantity', models.IntegerField(verbose_name='Количество')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Дата операции')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product', verbose_name='Товар')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Операция с товаром',
                'verbose_name_plural': 'Операции с товарами',
                'ordering': ['-date'],
            },
        ),
    ]

```

views.py:
```
from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib import messages
from django.db import models
from .forms import CustomUserCreationForm
from django.urls import reverse_lazy
from django.contrib.auth.views import PasswordResetView, PasswordResetDoneView, PasswordResetConfirmView, PasswordResetCompleteView
from .forms import CustomPasswordResetForm, CustomSetPasswordForm
from products.models import Product, StockTransaction, PurchaseInvoice

def is_admin(user):
    return user.is_authenticated and user.role == 'admin'


def login_view(request):
    if request.user.is_authenticated:
        return redirect('users:home')

    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')
        user = authenticate(request, email=email, password=password)

        if user is not None:
            login(request, user)
            messages.success(request, f'Добро пожаловать, {user.get_full_name()}!')
            return redirect('users:home')
        else:
            messages.error(request, 'Неверный email или пароль')

    return render(request, 'users/login.html')


def logout_view(request):
    logout(request)
    messages.info(request, 'Вы вышли из системы')
    return redirect('users:login')


@login_required
@user_passes_test(is_admin)
def register_view(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            messages.success(request, f'Пользователь {user.email} успешно создан!')
            return redirect('users:home')
        else:
            messages.error(request, 'Пожалуйста, исправьте ошибки в форме')
    else:
        form = CustomUserCreationForm()

    return render(request, 'users/register.html', {'form': form})


@login_required
def home_view(request):
    products_count = Product.objects.count()
    low_stock_count = Product.objects.filter(quantity__lte=models.F('min_stock')).count()
    invoices_count = PurchaseInvoice.objects.count()
    recent_transactions = StockTransaction.objects.select_related('product', 'user').order_by('-date')[:5]
    context = {
        'user': request.user,
        'products_count': products_count,
        'low_stock_count': low_stock_count,
        'invoices_count': invoices_count,
        'recent_transactions': recent_transactions,
    }
    return render(request, 'users/home.html', context)




class CustomPasswordResetView(PasswordResetView):
    form_class = CustomPasswordResetForm
    template_name = 'users/password_reset.html'
    email_template_name = 'users/password_reset_email.html'
    success_url = reverse_lazy('users:password_reset_done')

class CustomPasswordResetDoneView(PasswordResetDoneView):
    template_name = 'users/password_reset_done.html'

class CustomPasswordResetConfirmView(PasswordResetConfirmView):
    form_class = CustomSetPasswordForm
    template_name = 'users/password_reset_confirm.html'
    success_url = reverse_lazy('users:password_reset_complete')

class CustomPasswordResetCompleteView(PasswordResetCompleteView):
    template_name = 'users/password_reset_complete.html'
```

forms.py:
```
from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import CustomUser
from django.contrib.auth.forms import PasswordResetForm, SetPasswordForm
class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = CustomUser
        fields = ('email', 'first_name', 'last_name', 'role', 'password1', 'password2')
        widgets = {
            'role': forms.Select(choices=CustomUser.ROLE_CHOICES),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['first_name'].required = True
        self.fields['last_name'].required = True
        self.fields['email'].required = True
        self.fields['email'].widget.attrs.update({'placeholder': 'Введите email', 'class': 'form-control'})
        self.fields['first_name'].widget.attrs.update({'placeholder': 'Введите имя', 'class': 'form-control'})
        self.fields['last_name'].widget.attrs.update({'placeholder': 'Введите фамилию', 'class': 'form-control'})
        self.fields['role'].widget.attrs.update({'class': 'form-control'})
        self.fields['password1'].widget.attrs.update({'class': 'form-control'})
        self.fields['password2'].widget.attrs.update({'class': 'form-control'})




class CustomPasswordResetForm(PasswordResetForm):
    email = forms.EmailField(
        widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': 'Email'})
    )
class CustomSetPasswordForm(SetPasswordForm):
    new_password1 = forms.CharField(
        widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Новый пароль'})
    )
    new_password2 = forms.CharField(
        widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Подтвердите пароль'})
    )
```

admin.py:
```
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser

class CustomUserAdmin(UserAdmin):
    model = CustomUser
    list_display = ['email', 'first_name', 'last_name', 'role', 'is_staff']
    fieldsets = UserAdmin.fieldsets + (
        (None, {'fields': ('role',)}),
    )
    add_fieldsets = UserAdmin.add_fieldsets + (
        (None, {'fields': ('first_name', 'last_name', 'role')}),
    )

admin.site.register(CustomUser, CustomUserAdmin)
```

urls.py:
```
from django.urls import path
from . import views
from .views import CustomPasswordResetView, CustomPasswordResetDoneView, CustomPasswordResetConfirmView, CustomPasswordResetCompleteView

app_name = 'users'

urlpatterns = [
    path('login/', views.login_view, name='login'),
    path('logout/', views.logout_view, name='logout'),
    path('register/', views.register_view, name='register'),
    path('home/', views.home_view, name='home'),
    path('', views.home_view, name='home_root'),
    path('password_reset/', CustomPasswordResetView.as_view(), name='password_reset'),
    path('password_reset/done/', CustomPasswordResetDoneView.as_view(), name='password_reset_done'),
    path('reset/<uidb64>/<token>/', CustomPasswordResetConfirmView.as_view(), name='password_reset_confirm'),
    path('reset/done/', CustomPasswordResetCompleteView.as_view(), name='password_reset_complete'),
]

```

tests.py:
```
from django.test import TestCase

# Create your tests here.

```

models.py:
```
from django.db import models
from django.contrib.auth.models import AbstractUser

class CustomUser(AbstractUser):
    ROLE_CHOICES = [
        ('admin', 'Админ'),
        ('manager', 'Менеджер'),
        ('viewer', 'Наблюдатель'),
    ]

    role = models.CharField(
        max_length=20,
        choices=ROLE_CHOICES,
        default='manager',
        verbose_name='Role'
    )
    email = models.EmailField(unique=True, verbose_name='Email')

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username']

    class Meta:
        verbose_name = 'Пользователь'
        verbose_name_plural = 'Пользователи'

    def __str__(self):
        return f"{self.get_full_name()} ({self.email})"

```

apps.py:
```
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'

```

createsuperuser.py:
```
from django.contrib.auth.management.commands.createsuperuser import Command as BaseCommand
from django.core.management import CommandError
from users.models import CustomUser


class Command(BaseCommand):

    def handle(self, *args, **options):
        email = input('Email: ')
        password = input('Password: ')
        first_name = input('First name: ')
        last_name = input('Last name: ')

        try:
            user = CustomUser.objects.create_superuser(
                email=email,
                password=password,
                first_name=first_name,
                last_name=last_name,
                role='admin'
            )
            self.stdout.write(
                self.style.SUCCESS(f'Админ {email} успешно создан!')
            )
        except Exception as e:
            raise CommandError(f'Ошибка создания админа: {e}')
```

login.html:
```
{% extends "users/base.html" %}

{% block title %}Вход в систему{% endblock %}

{% block content %}
<div class="max-w-md mx-auto bg-white rounded-lg shadow-md p-6">
    <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">Вход в систему</h2>

    {% if messages %}
        {% for message in messages %}
            <div class="mb-4 p-3 rounded {% if message.tags == 'error' %}bg-red-100 text-red-700{% else %}bg-green-100 text-green-700{% endif %}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}

    <form method="post" class="space-y-4">
        {% csrf_token %}

        <div>
            <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email:</label>
            <input type="email" id="email" name="email" required
                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>

        <div>
            <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Пароль:</label>
            <input type="password" id="password" name="password" required
                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>

        <button type="submit"
                class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition duration-200">
            Войти
        </button>
    </form>

    <div class="mt-4 text-center">
        <a href="{% url 'users:password_reset' %}" class="text-blue-600 hover:text-blue-800 text-sm">
            Забыли пароль?
        </a>
    </div>

    {% if request.GET.next %}
        <input type="hidden" name="next" value="{{ request.GET.next }}">
    {% endif %}
</div>
{% endblock %}
```

home.html:
```
{% extends "users/base.html" %}

{% block title %}Главная страница{% endblock %}

{% block content %}
<div class="max-w-6xl mx-auto">
    <div class="text-center mb-12">
        <h1 class="text-4xl font-bold text-gray-800 mb-4">Добро пожаловать в Inventory Manager</h1>
        <p class="text-xl text-gray-600">Система управления складом и товарными запасами</p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
        <div class="bg-white rounded-lg shadow-md p-6 text-center">
            <div class="text-3xl font-bold text-blue-600 mb-2">{{ products_count }}</div>
            <div class="text-gray-700">Товаров на складе</div>
            <a href="{% url 'products:list' %}" class="inline-block mt-4 text-blue-600 hover:text-blue-800">Перейти к товарам →</a>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 text-center">
            <div class="text-3xl font-bold text-green-600 mb-2">{{ low_stock_count }}</div>
            <div class="text-gray-700">Товаров с низким запасом</div>
            <a href="{% url 'products:list' %}?low_stock=true" class="inline-block mt-4 text-green-600 hover:text-green-800">Просмотреть →</a>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 text-center">
            <div class="text-3xl font-bold text-purple-600 mb-2">{{ invoices_count }}</div>
            <div class="text-gray-700">Накладных прихода</div>
            <a href="{% url 'products:purchase_invoice_list' %}" class="inline-block mt-4 text-purple-600 hover:text-purple-800">Перейти к накладным →</a>
        </div>
    </div>

    <div class="">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">Быстрые действия</h2>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {% if user.role == 'admin' or user.role == 'manager' %}
            <a href="{% url 'products:create' %}" class="bg-blue-500 hover:bg-blue-600 text-white text-center py-8 px-6 rounded-lg transition duration-200">
                <div class="font-semibold">Добавить товар</div>
            </a>

            <a href="{% url 'products:purchase_invoice_create' %}" class="bg-green-500 hover:bg-green-600 text-white text-center py-8 px-6 rounded-lg transition duration-200">
                <div class="font-semibold">Создать накладную</div>
            </a>

            <a href="{% url 'products:supplier_create' %}" class="bg-purple-500 hover:bg-purple-600 text-white text-center py-8 px-6 rounded-lg transition duration-200">
                <div class="font-semibold">Добавить поставщика</div>
            </a>
            {% endif %}

            <a href="{% url 'products:transaction' %}" class="bg-orange-500 hover:bg-orange-600 text-white text-center py-8 px-6 rounded-lg transition duration-200">
                <div class="font-semibold">Операция со складом</div>
            </a>

<a href="{% url 'expenses:expense_invoice_create' %}" class="bg-red-500 hover:bg-red-600 text-white text-center py-8 px-6 rounded-lg transition duration-200">
    <div class="font-semibold">Оформить расход</div>
</a>

<a href="{% url 'expenses:expense_reason_list' %}" class="bg-indigo-500 hover:bg-indigo-600 text-white text-center py-8 px-6 rounded-lg transition duration-200">
    <div class="font-semibold">Причины расхода</div>
</a>
        </div>
    </div>

    <div class="mt-12">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">Последние операции</h2>
        <div class="bg-white rounded-lg shadow-md overflow-hidden">
            <table class="min-w-full">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="py-3 px-4 text-left">Дата</th>
                        <th class="py-3 px-4 text-left">Товар</th>
                        <th class="py-3 px-4 text-left">Тип операции</th>
                        <th class="py-3 px-4 text-left">Количество</th>
                        <th class="py-3 px-4 text-left">Пользователь</th>
                    </tr>
                </thead>
                <tbody>
                    {% for transaction in recent_transactions %}
                    <tr class="border-b border-gray-200 hover:bg-gray-50">
                        <td class="py-3 px-4">{{ transaction.date|date:"d.m.Y H:i" }}</td>
                        <td class="py-3 px-4">{{ transaction.product.name }}</td>
                        <td class="py-3 px-4">
                            <span class="px-2 py-1 text-xs rounded-full {% if transaction.transaction_type == 'in' %}bg-green-100 text-green-800{% else %}bg-red-100 text-red-800{% endif %}">
                                {{ transaction.get_transaction_type_display }}
                            </span>
                        </td>
                        <td class="py-3 px-4">{{ transaction.quantity }}</td>
                        <td class="py-3 px-4">{{ transaction.user.get_full_name|default:transaction.user.email }}</td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="5" class="py-8 px-4 text-center text-gray-500">
                            Операции не найдены
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>

            {% if recent_transactions %}
            <div class="p-4 border-t border-gray-200">
                <a href="{% url 'products:history' %}" class="text-blue-600 hover:text-blue-800 float-right">
                    Вся история операций →
                </a>
            </div>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}
```

password_reset_done.html:
```
{% extends "users/base.html" %}

{% block title %}Письмо отправлено{% endblock %}

{% block content %}
<h2>Письмо отправлено</h2>
<p>Мы отправили вам инструкции по сбросу пароля на указанный email.</p>
{% endblock %}
```

password_reset.html:
```
{% extends "users/base.html" %}

{% block title %}Сброс пароля{% endblock %}

{% block content %}
<div class="max-w-md mx-auto bg-white rounded-lg shadow-md p-6">
    <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">Сброс пароля</h2>

    <form method="post">
        {% csrf_token %}
        <div class="mb-4">
            <label for="id_email" class="block text-sm font-medium text-gray-700 mb-1">Email:</label>
            {{ form.email }}
            {% if form.email.errors %}
            <p class="text-red-500 text-xs italic mt-1">{{ form.email.errors.0 }}</p>
            {% endif %}
        </div>
        <button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition duration-200">
            Отправить ссылку для сброса
        </button>
    </form>

    <div class="mt-4 text-center">
        <a href="{% url 'users:login' %}" class="text-blue-600 hover:text-blue-800 text-sm">
            Вернуться к входу
        </a>
    </div>
</div>
{% endblock %}
```

password_reset_complete.html:
```
{% extends "users/base.html" %}

{% block title %}Пароль изменен{% endblock %}

{% block content %}
<h2>Пароль успешно изменен</h2>
<p>Ваш пароль был изменен. Теперь вы можете <a href="{% url 'users:login' %}" class="text-blue-600 hover:text-blue-800">войти</a>.</p>
{% endblock %}
```

password_reset_confirm.html:
```
{% extends "users/base.html" %}

{% block title %}Ввод нового пароля{% endblock %}

{% block content %}
<h2>Введите новый пароль</h2>
<form method="post">
    {% csrf_token %}
    <div class="mb-4">
        <label for="id_new_password1" class="block text-gray-700 text-sm font-bold mb-2">Новый пароль:</label>
        {{ form.new_password1 }}
        {% if form.new_password1.errors %}
        <p class="text-red-500 text-xs italic">{{ form.new_password1.errors.0 }}</p>
        {% endif %}
    </div>
    <div class="mb-4">
        <label for="id_new_password2" class="block text-gray-700 text-sm font-bold mb-2">Подтвердите пароль:</label>
        {{ form.new_password2 }}
        {% if form.new_password2.errors %}
        <p class="text-red-500 text-xs italic">{{ form.new_password2.errors.0 }}</p>
        {% endif %}
    </div>
    <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Сохранить новый пароль
    </button>
</form>
{% endblock %}
```

base.html:
```
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Inventory Manager - Система управления складом{% endblock %}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .sidebar {
            transition: all 0.3s ease;
        }
        .sidebar.collapsed {
            width: 70px;
        }
        .sidebar.collapsed .nav-text {
            display: none;
        }
        .content-area {
            transition: all 0.3s ease;
        }
        .dropdown:hover .dropdown-menu {
            display: block;
        }
        .table-row:hover {
            background-color: #f8fafc;
        }
    </style>
</head>
<body class="bg-gray-50 flex h-screen">
    <div class="sidebar bg-white shadow-lg w-64 flex flex-col">
        <div class="p-4 border-b border-gray-200 flex items-center justify-between">
            <div class="flex items-center">
                <div class="bg-blue-500 text-white p-2 rounded-lg">
                    <i class="fas fa-boxes text-xl"></i>
                </div>
                <h1 class="text-xl font-bold text-gray-800 ml-3">Inventory Manager</h1>
            </div>
            <button id="sidebar-toggle" class="text-gray-500 hover:text-gray-700">
                <i class="fas fa-bars"></i>
            </button>
        </div>
        <nav class="flex-1 p-4">
            <ul class="space-y-2">
                <li>
                    <a href="{% url 'users:home' %}" class="flex items-center p-3 text-gray-700 rounded-lg hover:bg-blue-50 hover:text-blue-600 transition duration-200">
                        <i class="fas fa-home w-6 text-center"></i>
                        <span class="nav-text ml-3 font-medium">Главная</span>
                    </a>
                </li>
                <li>
                    <a href="{% url 'products:list' %}" class="flex items-center p-3 text-gray-700 rounded-lg hover:bg-blue-50 hover:text-blue-600 transition duration-200">
                        <i class="fas fa-box w-6 text-center"></i>
                        <span class="nav-text ml-3 font-medium">Товары</span>
                    </a>
                </li>

                {% if user.role == 'admin' or user.role == 'manager' %}
                <li class="dropdown relative">
                    <a href="#" class="flex items-center justify-between p-3 text-gray-700 rounded-lg hover:bg-blue-50 hover:text-blue-600 transition duration-200">
                        <div class="flex items-center">
                            <i class="fas fa-exchange-alt w-6 text-center"></i>
                            <span class="nav-text ml-3 font-medium">Операции</span>
                        </div>
                        <i class="fas fa-chevron-down text-xs"></i>
                    </a>
                    <div class="dropdown-menu absolute left-0 right-0 mt-1 bg-white rounded-lg shadow-lg border border-gray-200 hidden z-10">
                        <a href="{% url 'products:transaction' %}" class="block px-4 py-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition duration-200">
                            Приход/Расход
                        </a>
                        <a href="{% url 'products:purchase_invoice_list' %}" class="block px-4 py-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition duration-200">
                            Накладные прихода
                        </a>
                        <a href="{% url 'expenses:expense_invoice_list' %}" class="block px-4 py-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition duration-200">
                            Накладные расхода
                        </a>
                    </div>
                </li>

                <li>
                    <a href="{% url 'products:supplier_list' %}" class="flex items-center p-3 text-gray-700 rounded-lg hover:bg-blue-50 hover:text-blue-600 transition duration-200">
                        <i class="fas fa-truck w-6 text-center"></i>
                        <span class="nav-text ml-3 font-medium">Поставщики</span>
                    </a>
                </li>
                {% endif %}

                <li>
                    <a href="{% url 'products:history' %}" class="flex items-center p-3 text-gray-700 rounded-lg hover:bg-blue-50 hover:text-blue-600 transition duration-200">
                        <i class="fas fa-history w-6 text-center"></i>
                        <span class="nav-text ml-3 font-medium">История операций</span>
                    </a>
                </li>

                {% if user.role == 'admin' %}
                <li>
                    <a href="{% url 'users:register' %}" class="flex items-center p-3 text-gray-700 rounded-lg hover:bg-blue-50 hover:text-blue-600 transition duration-200">
                        <i class="fas fa-user-plus w-6 text-center"></i>
                        <span class="nav-text ml-3 font-medium">Пользователи</span>
                    </a>
                </li>
                {% endif %}
            </ul>
        </nav>

        <div class="p-4 border-t border-gray-200">
            <div class="flex items-center">
                <div class="bg-gray-200 rounded-full w-10 h-10 flex items-center justify-center">
                    <i class="fas fa-user text-gray-600"></i>
                </div>
                <div class="ml-3">
                   {% if user.is_authenticated %}
  <p class="text-sm font-medium text-gray-800">{{ user.get_full_name|default:user.email }}</p>
{% else %}
  <p class="text-sm font-medium text-gray-800">Guest</p>
{% endif %}
                    <p class="text-xs text-gray-500">{{ user.get_role_display }}</p>
                </div>
            </div>
            <a href="{% url 'users:logout' %}" class="mt-3 flex items-center justify-center w-full p-2 text-gray-600 rounded-lg border border-gray-200 hover:bg-red-50 hover:text-red-600 hover:border-red-200 transition duration-200">
                <i class="fas fa-sign-out-alt"></i>
                <span class="nav-text ml-2">Выйти</span>
            </a>
        </div>
    </div>

    <div class="content-area flex-1 flex flex-col overflow-hidden">
        <header class="bg-white shadow-sm border-b border-gray-200">
            <div class="flex items-center justify-between p-4">
                <div>
                    <h2 class="text-xl font-semibold text-gray-800">{% block page_title %}{% endblock %}</h2>
                    <p class="text-sm text-gray-500">{% block page_subtitle %}{% endblock %}</p>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="bg-blue-50 text-blue-600 px-3 py-1 rounded-full text-sm">
                        <i class="fas fa-calendar-day mr-2"></i>
                        <span id="current-date"></span>
                    </div>
                </div>
            </div>
        </header>

        {% if messages %}
        <div class="mx-4 mt-4">
            {% for message in messages %}
            <div class="p-4 rounded-lg mb-2 {% if message.tags == 'error' %}bg-red-50 text-red-700 border border-red-200{% elif message.tags == 'success' %}bg-green-50 text-green-700 border border-green-200{% else %}bg-blue-50 text-blue-700 border border-blue-200{% endif %}">
                <div class="flex items-center">
                    <i class="fas {% if message.tags == 'error' %}fa-exclamation-circle{% elif message.tags == 'success' %}fa-check-circle{% else %}fa-info-circle{% endif %} mr-3"></i>
                    <span>{{ message }}</span>
                </div>
            </div>
            {% endfor %}
        </div>
        {% endif %}

        <main class="flex-1 overflow-y-auto p-6">
            {% block content %}
            {% endblock %}
        </main>
    </div>

    <script>
        document.getElementById('current-date').textContent = new Date().toLocaleDateString('ru-RU', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        document.getElementById('sidebar-toggle').addEventListener('click', function() {
            document.querySelector('.sidebar').classList.toggle('collapsed');
            document.querySelector('.content-area').classList.toggle('ml-16');
        });

        document.addEventListener('DOMContentLoaded', function() {
            const currentPath = window.location.pathname;
            const navLinks = document.querySelectorAll('nav a');

            navLinks.forEach(link => {
                if (link.getAttribute('href') === currentPath) {
                    link.classList.add('bg-blue-50', 'text-blue-600', 'border-r-4', 'border-blue-500');
                }
            });
        });
    </script>
</body>
</html>
```

register.html:
```
{% extends "users/base.html" %}

{% block title %}Регистрация пользователя - Inventory Manager{% endblock %}
{% block page_title %}Создание нового пользователя{% endblock %}
{% block page_subtitle %}Добавьте сотрудника в систему управления складом{% endblock %}

{% block content %}
<div class="max-w-2xl mx-auto">
    <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-8">
        <div class="text-center mb-8">
            <h2 class="text-2xl font-bold text-gray-800">Регистрация нового пользователя</h2>
            <p class="text-gray-600 mt-2">Заполните информацию о новом сотруднике</p>
        </div>

        <form method="post" class="space-y-6">
            {% csrf_token %}
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="id_first_name" class="block text-sm font-medium text-gray-700 mb-2">

                        Имя
                    </label>
                    <div class="relative">
                        {{ form.first_name }}
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-user text-gray-400"></i>
                        </div>
                    </div>
                    {% if form.first_name.errors %}
                    <div class="mt-2 flex items-center text-red-600 text-sm">
                        <i class="fas fa-exclamation-circle mr-2"></i>
                        {{ form.first_name.errors.0 }}
                    </div>
                    {% endif %}
                </div>

                <div>
                    <label for="id_last_name" class="block text-sm font-medium text-gray-700 mb-2">

                        Фамилия
                    </label>
                    <div class="relative">
                        {{ form.last_name }}
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-user text-gray-400"></i>
                        </div>
                    </div>
                    {% if form.last_name.errors %}
                    <div class="mt-2 flex items-center text-red-600 text-sm">
                        <i class="fas fa-exclamation-circle mr-2"></i>
                        {{ form.last_name.errors.0 }}
                    </div>
                    {% endif %}
                </div>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="id_email" class="block text-sm font-medium text-gray-700 mb-2">

                        Email
                    </label>
                    <div class="relative">
                        {{ form.email }}
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-envelope text-gray-400"></i>
                        </div>
                    </div>
                    {% if form.email.errors %}
                    <div class="mt-2 flex items-center text-red-600 text-sm">
                        {{ form.email.errors.0 }}
                    </div>
                    {% endif %}
                </div>

                <div>
                    <label for="id_role" class="block text-sm font-medium text-gray-700 mb-2">
                        Роль
                    </label>
                    <div class="relative">
                        {{ form.role }}
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-user-tag text-gray-400"></i>
                        </div>
                    </div>
                    {% if form.role.errors %}
                    <div class="mt-2 flex items-center text-red-600 text-sm">
                        {{ form.role.errors.0 }}
                    </div>
                    {% endif %}
                </div>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="id_password1" class="block text-sm font-medium text-gray-700 mb-2">

                        Пароль
                    </label>
                    <div class="relative">
                        {{ form.password1 }}
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-lock text-gray-400"></i>
                        </div>
                    </div>
                    {% if form.password1.errors %}
                    <div class="mt-2 flex items-center text-red-600 text-sm">
                        <i class="fas fa-exclamation-circle mr-2"></i>
                        {{ form.password1.errors.0 }}
                    </div>
                    {% endif %}
                    <div class="mt-2 text-xs text-gray-500">
                        <i class="fas fa-info-circle mr-1"></i>
                        Минимум 8 символов, буквы и цифры
                    </div>
                </div>
                <div>
                    <label for="id_password2" class="block text-sm font-medium text-gray-700 mb-2">

                        Подтверждение пароля
                    </label>
                    <div class="relative">
                        {{ form.password2 }}
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-lock text-gray-400"></i>
                        </div>
                    </div>
                    {% if form.password2.errors %}
                    <div class="mt-2 flex items-center text-red-600 text-sm">
                        <i class="fas fa-exclamation-circle mr-2"></i>
                        {{ form.password2.errors.0 }}
                    </div>
                    {% endif %}
                </div>
            </div>
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h4 class="font-medium text-blue-800 mb-2 flex items-center">
                    <i class="fas fa-info-circle mr-2"></i>
                    Описание ролей:
                </h4>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-3 text-sm">
                    <div class="bg-white p-3 rounded-lg border border-blue-100">
                        <div class="font-medium text-blue-700">Админ</div>
                        <div class="text-blue-600 text-xs mt-1">Полный доступ ко всем функциям системы</div>
                    </div>
                    <div class="bg-white p-3 rounded-lg border border-blue-100">
                        <div class="font-medium text-blue-700">Менеджер</div>
                        <div class="text-blue-600 text-xs mt-1">Управление товарами и операциями</div>
                    </div>
                    <div class="bg-white p-3 rounded-lg border border-blue-100">
                        <div class="font-medium text-blue-700">Наблюдатель</div>
                        <div class="text-blue-600 text-xs mt-1">Просмотр информации без редактирования</div>
                    </div>
                </div>
            </div>
            <div class="flex flex-col sm:flex-row gap-4 pt-6 border-t border-gray-200">
                <a href="{% url 'users:home' %}" class="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-3 px-6 rounded-lg transition duration-200 flex items-center justify-center">
                    <i class="fas fa-arrow-left mr-2"></i>
                    Назад на главную
                </a>
                <button type="submit" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-medium py-3 px-6 rounded-lg transition duration-200 flex items-center justify-center">
                    Зарегистрировать
                </button>

            </div>
        </form>
    </div>
</div>

<style>
    input, select {
        width: 100%;
        padding: 12px 16px 12px 40px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.3s ease;
        background-color: #f9fafb;
    }

    input:focus, select:focus {
        outline: none;
        border-color: #3b82f6;
        background-color: white;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    .error {
        border-color: #ef4444;
    }
    @media (max-width: 768px) {
        .grid-cols-2 {
            grid-template-columns: 1fr;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const errorFields = document.querySelectorAll('.text-red-600');
        errorFields.forEach(errorField => {
            const fieldId = errorField.previousElementSibling.querySelector('input, select').id;
            const field = document.getElementById(fieldId);
            if (field) {
                field.classList.add('error');
            }
        });
        const password1 = document.getElementById('id_password1');
        if (password1) {
            password1.addEventListener('focus', function() {
                const hint = this.parentElement.nextElementSibling;
                if (hint && hint.classList.contains('text-xs')) {
                    hint.style.opacity = '1';
                }
            });
        }
    });
</script>
{% endblock %}
```

password_reset_email.html:
```
{% load i18n %}{% autoescape off %}
{% translate "Здравствуйте! Вы запросили сброс пароля для вашего аккаунта на сайте" %} {{ site_name }}.

{% translate "Перейдите по ссылке ниже чтобы установить новый пароль:" %}
{% block reset_link %}
{{ protocol }}://{{ domain }}{% url 'users:password_reset_confirm' uidb64=uid token=token %}
{% endblock %}

{% translate "Если вы не запрашивали сброс пароля, проигнорируйте это письмо." %}

{% translate "Спасибо за использование нашего сайта!" %}

{% endautoescape %}
```

0002_alter_customuser_role.py:
```
# Generated by Django 5.0.7 on 2025-09-19 10:46

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='customuser',
            name='role',
            field=models.CharField(choices=[('admin', 'Admin'), ('manager', 'Manager'), ('viewer', 'Viewer')], default='manager', max_length=20, verbose_name='Role'),
        ),
    ]

```

0003_alter_customuser_role.py:
```
# Generated by Django 5.0.7 on 2025-09-22 09:54

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_alter_customuser_role'),
    ]

    operations = [
        migrations.AlterField(
            model_name='customuser',
            name='role',
            field=models.CharField(choices=[('admin', 'Админ'), ('manager', 'Менеджер'), ('viewer', 'Наблюдатель')], default='manager', max_length=20, verbose_name='Role'),
        ),
    ]

```

0001_initial.py:
```
import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('manager', 'Manager'), ('viewer', 'Viewer')], default='admin', max_length=20, verbose_name='Role')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

```

urls.py:
```
"""
URL configuration for InvetoryManager project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include
from django.shortcuts import redirect
from django.views.generic import RedirectView
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('users/', include('users.urls')),
    path('products/', include('products.urls')),
    path('expenses/', include('expenses.urls')),
    path('', RedirectView.as_view(url='/users/home/', permanent=False)),
]
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
```

wsgi.py:
```
"""
WSGI config for InvetoryManager project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'InvetoryManager.settings')

application = get_wsgi_application()

```

settings.py:
```
"""
Django settings for InvetoryManager project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$lg=i%(7-x9oweemg!tl*pt89kyo!ing#d@!ynl7+3^gl1pzdm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'products',
    'expenses',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'InvetoryManager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'InvetoryManager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.CustomUser'


LOGIN_REDIRECT_URL = '/users/home/'
LOGOUT_REDIRECT_URL = '/users/login/'
LOGIN_URL = '/users/login/'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'ajnursamsutdinov9309@gmail.com'
EMAIL_HOST_PASSWORD = 'uidy qeyg tfvk lkli'
DEFAULT_FROM_EMAIL = 'your-email@gmail.com'
```

asgi.py:
```
"""
ASGI config for InvetoryManager project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'InvetoryManager.settings')

application = get_asgi_application()

```

views.py:
```
import json
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib import messages
from django.db import transaction
from django.core.paginator import Paginator
from django.db.models import Q
from .models import ExpenseInvoice, ExpenseInvoiceItem, ExpenseReason
from .forms import ExpenseInvoiceForm, ExpenseInvoiceItemFormSet, ExpenseReasonForm
from products.models import StockTransaction, Product
from django.contrib.auth import get_user_model

User = get_user_model()


def is_admin_or_manager(user):
    return user.is_authenticated and user.role in ['admin', 'manager']


@login_required
@user_passes_test(is_admin_or_manager)
def expense_reason_list(request):
    """Список причин расхода"""
    reasons = ExpenseReason.objects.all().order_by('name')
    return render(request, 'expenses/expense_reason_list.html', {'reasons': reasons})


@login_required
@user_passes_test(is_admin_or_manager)
def expense_reason_create(request):
    """Создание причины расхода"""
    if request.method == 'POST':
        form = ExpenseReasonForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Причина расхода успешно создана!')
            return redirect('expenses:expense_reason_list')
    else:
        form = ExpenseReasonForm()

    return render(request, 'expenses/expense_reason_form.html', {
        'form': form,
        'title': 'Создать причину расхода'
    })


@login_required
@user_passes_test(is_admin_or_manager)
def expense_invoice_list(request):
    """Список накладных расхода"""
    invoices = ExpenseInvoice.objects.all().select_related('reason', 'created_by')
    return render(request, 'expenses/expense_invoice_list.html', {'invoices': invoices})


@login_required
@user_passes_test(is_admin_or_manager)
def expense_invoice_create(request):
    """Создание накладной расхода"""
    if request.method == 'POST':
        form = ExpenseInvoiceForm(request.POST)
        formset = ExpenseInvoiceItemFormSet(request.POST)

        if form.is_valid() and formset.is_valid():
            try:
                with transaction.atomic():
                    invoice = form.save(commit=False)
                    invoice.created_by = request.user
                    invoice.save()

                    instances = formset.save(commit=False)
                    for instance in instances:
                        instance.invoice = invoice
                        instance.save()

                    for instance in formset.deleted_objects:
                        instance.delete()

                messages.success(request, 'Накладная расхода успешно создана!')
                return redirect('expenses:expense_invoice_list')

            except Exception as e:
                messages.error(request, f'Ошибка при создании накладной: {str(e)}')
    else:
        last_invoice = ExpenseInvoice.objects.order_by('-id').first()
        next_number = f"РС-{(last_invoice.id + 1) if last_invoice else 1:06d}" if last_invoice else "РС-000001"

        form = ExpenseInvoiceForm(initial={'invoice_number': next_number})
        formset = ExpenseInvoiceItemFormSet()

    return render(request, 'expenses/expense_invoice_form.html', {
        'form': form,
        'formset': formset,
        'title': 'Создать накладную расхода'
    })


@login_required
@user_passes_test(is_admin_or_manager)
def expense_invoice_detail(request, pk):
    """Просмотр деталей накладной расхода"""
    invoice = get_object_or_404(ExpenseInvoice.objects.prefetch_related('expenseinvoiceitem_set__product'), pk=pk)
    items = invoice.expenseinvoiceitem_set.all()

    return render(request, 'expenses/expense_invoice_detail.html', {
        'invoice': invoice,
        'items': items
    })


@login_required
@user_passes_test(is_admin_or_manager)
def expense_invoice_complete(request, pk):
    """Завершение накладной расхода - уменьшение остатков"""
    invoice = get_object_or_404(ExpenseInvoice, pk=pk)

    if invoice.status != 'draft':
        messages.error(request, 'Накладная уже обработана или отменена!')
        return redirect('expenses:expense_invoice_detail', pk=pk)

    try:
        with transaction.atomic():
            for item in invoice.expenseinvoiceitem_set.all():
                if item.product.quantity < item.quantity:
                    messages.error(request, f'Недостаточно товара "{item.product.name}" на складе!')
                    return redirect('expenses:expense_invoice_detail', pk=pk)

            for item in invoice.expenseinvoiceitem_set.all():
                product = item.product
                product.quantity -= item.quantity
                product.save()

                StockTransaction.objects.create(
                    product=product,
                    transaction_type='out',
                    quantity=item.quantity,
                    user=request.user,
                    comment=f'Расход по накладной {invoice.invoice_number}. Причина: {invoice.reason.name}'
                )

            invoice.status = 'completed'
            invoice.save()

        messages.success(request, 'Накладная расхода успешно завершена! Остатки обновлены.')

    except Exception as e:
        messages.error(request, f'Ошибка при завершении накладной: {str(e)}')

    return redirect('expenses:expense_invoice_detail', pk=pk)


@login_required
@user_passes_test(is_admin_or_manager)
def expense_invoice_cancel(request, pk):
    """Отмена накладной расхода"""
    invoice = get_object_or_404(ExpenseInvoice, pk=pk)

    if invoice.status != 'draft':
        messages.error(request, 'Можно отменять только черновики!')
        return redirect('expenses:expense_invoice_detail', pk=pk)

    invoice.status = 'cancelled'
    invoice.save()

    messages.success(request, 'Накладная расхода отменена!')
    return redirect('expenses:expense_invoice_detail', pk=pk)

@login_required
@user_passes_test(is_admin_or_manager)
def expense_invoice_create_simple(request):
    """Упрощенное создание накладной расхода"""
    if request.method == 'POST':
        form = ExpenseInvoiceForm(request.POST)

        if form.is_valid():
            try:
                with transaction.atomic():
                    invoice = form.save(commit=False)
                    invoice.created_by = request.user
                    invoice.save()

                    items_data = request.POST.get('items_data', '[]')
                    items = json.loads(items_data)

                    for item in items:
                        product = Product.objects.get(id=item['product_id'])
                        quantity = int(item['quantity'])

                        ExpenseInvoiceItem.objects.create(
                            invoice=invoice,
                            product=product,
                            quantity=quantity
                        )

                    invoice.update_total_amount()

                    messages.success(request, 'Накладная расхода успешно создана!')
                    return redirect('expenses:expense_invoice_list')

            except Exception as e:
                messages.error(request, f'Ошибка при создании накладной: {str(e)}')
        else:
            messages.error(request, 'Пожалуйста, исправьте ошибки в форме')
    else:
        last_invoice = ExpenseInvoice.objects.order_by('-id').first()
        next_number = f"РС-{(last_invoice.id + 1) if last_invoice else 1:06d}" if last_invoice else "РС-000001"
        form = ExpenseInvoiceForm(initial={'invoice_number': next_number})

    products_data = []
    for product in Product.objects.all():
        products_data.append({
            'id': product.id,
            'name': product.name,
            'sku': product.sku,
            'price': float(product.price),
            'quantity': product.quantity,
            'unit': product.unit
        })

    return render(request, 'expenses/expense_invoice_form_simple.html', {
        'form': form,
        'products': json.dumps(products_data),
        'title': 'Создать накладную расхода'
    })
```

forms.py:
```
from django import forms
from .models import ExpenseInvoice, ExpenseInvoiceItem, ExpenseReason
from django.forms import inlineformset_factory


class ExpenseInvoiceForm(forms.ModelForm):
    class Meta:
        model = ExpenseInvoice
        fields = ['invoice_number', 'expense_date', 'reason', 'comment']
        widgets = {
            'invoice_number': forms.TextInput(attrs={'class': 'form-control'}),
            'expense_date': forms.DateInput(attrs={'class': 'form-control', 'type': 'date'}),
            'reason': forms.Select(attrs={'class': 'form-control'}),
            'comment': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }


class ExpenseInvoiceItemForm(forms.ModelForm):
    class Meta:
        model = ExpenseInvoiceItem
        fields = ['product', 'quantity']
        widgets = {
            'product': forms.Select(attrs={'class': 'form-control product-select'}),
            'quantity': forms.NumberInput(attrs={'class': 'form-control quantity'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if 'product' in self.fields:
            self.fields['product'].widget.attrs.update({'class': 'form-control product-select'})
            products_with_prices = []
            for product in self.fields['product'].queryset:
                products_with_prices.append((
                    product.id,
                    product,
                    f"{product.name} - {product.price} ₸ (остаток: {product.quantity})"
                ))

            self.fields['product'].choices = [
                (product_id, display_text) for product_id, product, display_text in products_with_prices
            ]


ExpenseInvoiceItemFormSet = inlineformset_factory(
    ExpenseInvoice,
    ExpenseInvoiceItem,
    form=ExpenseInvoiceItemForm,
    extra=1,
    can_delete=True
)


class ExpenseReasonForm(forms.ModelForm):
    class Meta:
        model = ExpenseReason
        fields = ['name', 'description']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'description': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }
```

admin.py:
```
from django.contrib import admin
from .models import ExpenseReason, ExpenseInvoice, ExpenseInvoiceItem


@admin.register(ExpenseReason)
class ExpenseReasonAdmin(admin.ModelAdmin):
    list_display = ['name', 'description']
    search_fields = ['name']


class ExpenseInvoiceItemInline(admin.TabularInline):
    model = ExpenseInvoiceItem
    extra = 1
    fields = ['product', 'quantity', 'total_price']
    readonly_fields = ['total_price']


@admin.register(ExpenseInvoice)
class ExpenseInvoiceAdmin(admin.ModelAdmin):
    list_display = ['invoice_number', 'expense_date', 'reason', 'status', 'total_amount', 'created_by']
    list_filter = ['status', 'expense_date', 'reason']
    search_fields = ['invoice_number', 'reason__name']
    readonly_fields = ['total_amount', 'created_at', 'updated_at']
    inlines = [ExpenseInvoiceItemInline]

    fieldsets = (
        (None, {
            'fields': ('invoice_number', 'expense_date', 'reason', 'status')
        }),
        ('Финансы', {
            'fields': ('total_amount',)
        }),
        ('Дополнительно', {
            'fields': ('comment', 'created_by', 'created_at', 'updated_at')
        }),
    )


@admin.register(ExpenseInvoiceItem)
class ExpenseInvoiceItemAdmin(admin.ModelAdmin):
    list_display = ['invoice', 'product', 'quantity', 'total_price']
    list_filter = ['invoice__reason', 'invoice__expense_date']
    search_fields = ['product__name', 'invoice__invoice_number']
```

urls.py:
```
from django.urls import path
from . import views

app_name = 'expenses'

urlpatterns = [
    path('reasons/', views.expense_reason_list, name='expense_reason_list'),
    path('reasons/create/', views.expense_reason_create, name='expense_reason_create'),
    path('invoices/', views.expense_invoice_list, name='expense_invoice_list'),
    path('invoices/create/', views.expense_invoice_create_simple, name='expense_invoice_create'),
    path('invoices/<int:pk>/', views.expense_invoice_detail, name='expense_invoice_detail'),
    path('invoices/<int:pk>/complete/', views.expense_invoice_complete, name='expense_invoice_complete'),
    path('invoices/<int:pk>/cancel/', views.expense_invoice_cancel, name='expense_invoice_cancel'),
]
```

tests.py:
```
from django.test import TestCase

# Create your tests here.

```

models.py:
```
from django.db import models
from django.contrib.auth import get_user_model
from products.models import Product

User = get_user_model()


class ExpenseReason(models.Model):
    """Причины расхода товара"""
    name = models.CharField(max_length=255, verbose_name='Название причины')
    description = models.TextField(blank=True, verbose_name='Описание')

    class Meta:
        verbose_name = 'Причина расхода'
        verbose_name_plural = 'Причины расхода'

    def __str__(self):
        return self.name


class ExpenseInvoice(models.Model):
    """Накладная расхода товара"""
    STATUS_CHOICES = [
        ('draft', 'Черновик'),
        ('completed', 'Завершена'),
        ('cancelled', 'Отменена'),
    ]

    invoice_number = models.CharField(max_length=50, unique=True, verbose_name='Номер накладной')
    expense_date = models.DateField(verbose_name='Дата расхода')
    reason = models.ForeignKey(ExpenseReason, on_delete=models.PROTECT, verbose_name='Причина расхода')
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='draft', verbose_name='Статус')
    total_amount = models.DecimalField(max_digits=12, decimal_places=2, default=0, verbose_name='Общая стоимость')
    comment = models.TextField(blank=True, verbose_name='Комментарий')
    created_by = models.ForeignKey(User, on_delete=models.PROTECT, verbose_name='Создал')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='Дата обновления')

    class Meta:
        verbose_name = 'Накладная расхода'
        verbose_name_plural = 'Накладные расхода'
        ordering = ['-expense_date', '-created_at']

    def __str__(self):
        return f"Накладная расхода {self.invoice_number} от {self.expense_date}"

    def update_total_amount(self):
        """Обновление общей суммы накладной"""
        from django.db.models import Sum
        total = self.expenseinvoiceitem_set.aggregate(
            total=Sum('total_price')
        )['total'] or 0
        self.total_amount = total
        self.save(update_fields=['total_amount'])


class ExpenseInvoiceItem(models.Model):
    """Строка накладной расхода"""
    invoice = models.ForeignKey(ExpenseInvoice, on_delete=models.CASCADE, verbose_name='Накладная')
    product = models.ForeignKey(Product, on_delete=models.PROTECT, verbose_name='Товар')
    quantity = models.PositiveIntegerField(verbose_name='Количество')
    total_price = models.DecimalField(max_digits=10, decimal_places=2, editable=False, verbose_name='Общая стоимость')

    class Meta:
        verbose_name = 'Строка накладной расхода'
        verbose_name_plural = 'Строки накладной расхода'
        unique_together = ['invoice', 'product']

    def __str__(self):
        return f"{self.product.name} - {self.quantity} {self.product.get_unit_display()}"

    def save(self, *args, **kwargs):
        self.total_price = self.quantity * self.product.price
        super().save(*args, **kwargs)
        self.invoice.update_total_amount()

    def delete(self, *args, **kwargs):
        invoice = self.invoice
        super().delete(*args, **kwargs)
        invoice.update_total_amount()
```

apps.py:
```
from django.apps import AppConfig


class ExpensesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'expenses'

```

expense_reason_list.html:
```
{% extends "users/base.html" %}

{% block title %}Причины расхода{% endblock %}

{% block content %}
<div>
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800">Причины расхода</h2>
        <a href="{% url 'expenses:expense_reason_create' %}" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-200">
            Добавить причину
        </a>
    </div>

    <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <table class="min-w-full">
            <thead class="bg-gray-50">
                <tr>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Название</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Описание</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                {% for reason in reasons %}
                <tr class="hover:bg-gray-50 transition duration-150">
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">{{ reason.name }}</div>
                    </td>
                    <td class="py-3 px-4">
                        <div class="text-sm text-gray-900">{{ reason.description|default:"-" }}</div>
                    </td>
                </tr>
                {% empty %}
                <tr>
                    <td colspan="2" class="py-8 px-4 text-center">
                        <div class="text-gray-500 text-lg">Причины расхода не найдены</div>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
{% endblock %}
```

expense_invoice_list.html:
```
{% extends "users/base.html" %}

{% block title %}Накладные расхода{% endblock %}

{% block content %}
<div>
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800">Накладные расхода</h2>
        <a href="{% url 'expenses:expense_invoice_create' %}" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-200">
            Создать накладную
        </a>
    </div>

    <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <table class="min-w-full">
            <thead class="bg-gray-50">
                <tr>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Номер</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Дата</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Причина</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Статус</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Сумма</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Создал</th>
                    <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Действия</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                {% for invoice in invoices %}
                <tr class="hover:bg-gray-50 transition duration-150">
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">{{ invoice.invoice_number }}</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{{ invoice.expense_date|date:"d.m.Y" }}</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{{ invoice.reason.name }}</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <span class="px-2 py-1 text-xs rounded-full
                            {% if invoice.status == 'draft' %}bg-yellow-100 text-yellow-800
                            {% elif invoice.status == 'completed' %}bg-green-100 text-green-800
                            {% else %}bg-red-100 text-red-800{% endif %}">
                            {{ invoice.get_status_display }}
                        </span>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">{{ invoice.total_amount }} ₽</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{{ invoice.created_by.get_full_name }}</div>
                    </td>
                    <td class="py-3 px-4 whitespace-nowrap">
                        <div class="flex space-x-2">
                            <a href="{% url 'expenses:expense_invoice_detail' invoice.pk %}"
                               class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                                Просмотр
                            </a>
                            {% if invoice.status == 'draft' %}
                            <span class="text-gray-300">|</span>
                            <a href="{% url 'expenses:expense_invoice_complete' invoice.pk %}"
                               class="text-green-600 hover:text-green-800 text-sm font-medium"
                               onclick="return confirm('Завершить накладную? Остатки будут уменьшены.')">
                                Завершить
                            </a>
                            <span class="text-gray-300">|</span>
                            <a href="{% url 'expenses:expense_invoice_cancel' invoice.pk %}"
                               class="text-red-600 hover:text-red-800 text-sm font-medium"
                               onclick="return confirm('Отменить накладную?')">
                                Отменить
                            </a>
                            {% endif %}
                        </div>
                    </td>
                </tr>
                {% empty %}
                <tr>
                    <td colspan="7" class="py-8 px-4 text-center">
                        <div class="text-gray-500 text-lg">Накладные расхода не найдены</div>
                        <a href="{% url 'expenses:expense_invoice_create' %}" class="text-blue-600 hover:text-blue-800 mt-2 inline-block">
                            Создать первую накладную
                        </a>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
{% endblock %}
```

expense_invoice_form_simple.html:
```
{% extends "users/base.html" %}

{% block title %}{{ title }}{% endblock %}

{% block content %}
<div class="max-w-6xl mx-auto">
    <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">{{ title }}</h2>

        <form method="post" id="expense-form">
            {% csrf_token %}
            <input type="hidden" name="items_data" id="items-data" value="[]">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                    <label for="{{ form.invoice_number.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                        {{ form.invoice_number.label }} *
                    </label>
                    {{ form.invoice_number }}
                    {% if form.invoice_number.errors %}
                    <p class="text-red-500 text-xs italic mt-1">{{ form.invoice_number.errors.0 }}</p>
                    {% endif %}
                </div>

                <div>
                    <label for="{{ form.expense_date.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                        {{ form.expense_date.label }} *
                    </label>
                    {{ form.expense_date }}
                    {% if form.expense_date.errors %}
                    <p class="text-red-500 text-xs italic mt-1">{{ form.expense_date.errors.0 }}</p>
                    {% endif %}
                </div>

                <div class="md:col-span-2">
                    <label for="{{ form.reason.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                        {{ form.reason.label }} *
                    </label>
                    {{ form.reason }}
                    {% if form.reason.errors %}
                    <p class="text-red-500 text-xs italic mt-1">{{ form.reason.errors.0 }}</p>
                    {% endif %}
                </div>
            </div>

            <div class="mb-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Товары для списания</h3>

                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white border border-gray-200" id="items-table">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="py-3 px-4 border-b text-left text-sm font-medium text-gray-700">Товар</th>
                                <th class="py-3 px-4 border-b text-left text-sm font-medium text-gray-700">Количество</th>
                                <th class="py-3 px-4 border-b text-left text-sm font-medium text-gray-700">Цена</th>
                                <th class="py-3 px-4 border-b text-left text-sm font-medium text-gray-700">Сумма</th>
                                <th class="py-3 px-4 border-b text-left text-sm font-medium text-gray-700">Остаток</th>
                                <th class="py-3 px-4 border-b text-left text-sm font-medium text-gray-700">Действие</th>
                            </tr>
                        </thead>
                        <tbody id="items-tbody">
                        </tbody>
                    </table>
                </div>
                <div class="mt-4 flex space-x-4">
                    <button type="button" id="add-item" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-200">
                        + Добавить товар
                    </button>
                    <div class="flex items-center text-sm text-gray-600">
                        <i class="fas fa-info-circle mr-2"></i>
                        Добавьте товары для списания
                    </div>
                </div>
            </div>
            <div class="mb-6">
                <label for="{{ form.comment.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                    {{ form.comment.label }}
                </label>
                {{ form.comment }}
                {% if form.comment.errors %}
                <p class="text-red-500 text-xs italic mt-1">{{ form.comment.errors.0 }}</p>
                {% endif %}
            </div>
            <div class="bg-gray-50 p-4 rounded-lg mb-6">
                <div class="flex justify-between items-center">
                    <span class="text-lg font-semibold text-gray-800">Общая стоимость:</span>
                    <span id="total-amount" class="text-2xl font-bold text-blue-600">0.00 ₽</span>
                </div>
            </div>
            <div class="flex items-center justify-between mt-8 pt-6 border-t border-gray-200">
                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg transition duration-200">
                    Сохранить накладную
                </button>
                <a href="{% url 'expenses:expense_invoice_list' %}" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-lg transition duration-200">
                    Отмена
                </a>
            </div>
        </form>
    </div>
</div>

<script>
const products = {{ products|safe }};
let itemCounter = 0;

function addItemRow(productId = '', quantity = '') {
    const tbody = document.getElementById('items-tbody');
    const rowId = `item-${itemCounter++}`;

    const row = document.createElement('tr');
    row.id = rowId;
    row.className = 'item-row border-b hover:bg-gray-50';

    let productOptions = '<option value="">Выберите товар</option>';
    products.forEach(product => {
        const selected = product.id == productId ? 'selected' : '';
        productOptions += `<option value="${product.id}" data-price="${product.price}" data-quantity="${product.quantity}" ${selected}>
            ${product.name} (${product.sku}) - ${product.price} ₽ (остаток: ${product.quantity} ${product.unit})
        </option>`;
    });

    row.innerHTML = `
        <td class="py-3 px-4">
            <select class="product-select w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" onchange="updateRow('${rowId}')">
                ${productOptions}
            </select>
        </td>
        <td class="py-3 px-4">
            <input type="number" class="quantity w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                   value="${quantity}" min="1" step="1" onchange="updateRow('${rowId}')" oninput="updateRow('${rowId}')">
        </td>
        <td class="py-3 px-4 price-cell text-sm font-medium">0.00 ₽</td>
        <td class="py-3 px-4 total-cell text-sm font-medium text-blue-600">0.00 ₽</td>
        <td class="py-3 px-4 stock-cell text-sm text-gray-500">-</td>
        <td class="py-3 px-4">
            <button type="button" onclick="removeRow('${rowId}')" class="text-red-500 hover:text-red-700 transition duration-200">
                <i class="fas fa-trash"></i>
            </button>
        </td>
    `;

    tbody.appendChild(row);
    updateRow(rowId);
}

function updateRow(rowId) {
    const row = document.getElementById(rowId);
    if (!row) return;

    const productSelect = row.querySelector('.product-select');
    const quantityInput = row.querySelector('.quantity');
    const priceCell = row.querySelector('.price-cell');
    const totalCell = row.querySelector('.total-cell');
    const stockCell = row.querySelector('.stock-cell');

    const selectedOption = productSelect.options[productSelect.selectedIndex];
    const price = selectedOption ? parseFloat(selectedOption.getAttribute('data-price')) || 0 : 0;
    const stock = selectedOption ? parseInt(selectedOption.getAttribute('data-quantity')) || 0 : 0;
    const quantity = parseFloat(quantityInput.value) || 0;
    const total = price * quantity;

    priceCell.textContent = price.toFixed(2) + ' ₽';
    totalCell.textContent = total.toFixed(2) + ' ₽';
    stockCell.textContent = stock + ' шт';

    if (quantity > stock) {
        quantityInput.classList.add('border-red-500', 'bg-red-50');
        stockCell.classList.add('text-red-600', 'font-semibold');
        stockCell.innerHTML = `${stock} шт <span class="text-xs">(недостаточно)</span>`;
    } else {
        quantityInput.classList.remove('border-red-500', 'bg-red-50');
        stockCell.classList.remove('text-red-600', 'font-semibold');
        stockCell.textContent = stock + ' шт';
    }

    updateTotal();
}

function removeRow(rowId) {
    const row = document.getElementById(rowId);
    if (row) {
        row.remove();
        updateTotal();
    }
}

function updateTotal() {
    let totalAmount = 0;

    document.querySelectorAll('.item-row').forEach(row => {
        const totalCell = row.querySelector('.total-cell');
        const totalText = totalCell.textContent.replace(' ₽', '');
        totalAmount += parseFloat(totalText) || 0;
    });

    document.getElementById('total-amount').textContent = totalAmount.toFixed(2) + ' ₽';
}

function prepareFormData() {
    const items = [];
    let hasErrors = false;

    document.querySelectorAll('.item-row').forEach(row => {
        const productSelect = row.querySelector('.product-select');
        const quantityInput = row.querySelector('.quantity');

        if (productSelect.value && quantityInput.value) {
            const productId = productSelect.value;
            const quantity = parseInt(quantityInput.value);
            const stock = parseInt(productSelect.options[productSelect.selectedIndex].getAttribute('data-quantity'));

            if (quantity > stock) {
                hasErrors = true;
                quantityInput.classList.add('border-red-500', 'bg-red-50');
                alert(`Недостаточно товара "${productSelect.options[productSelect.selectedIndex].text}" на складе!`);
            } else {
                items.push({
                    product_id: productId,
                    quantity: quantity
                });
            }
        }
    });

    document.getElementById('items-data').value = JSON.stringify(items);

    if (items.length === 0 && !hasErrors) {
        alert('Добавьте хотя бы один товар для списания');
        return false;
    }

    return !hasErrors && items.length > 0;
}

document.getElementById('expense-form').addEventListener('submit', function(e) {
    if (!prepareFormData()) {
        e.preventDefault();
        return false;
    }
});

document.addEventListener('DOMContentLoaded', function() {
    addItemRow();
    document.getElementById('add-item').addEventListener('click', function() {
        addItemRow();
    });
});
</script>
{% endblock %}
```

expense_reason_form.html:
```
{% extends "users/base.html" %}

{% block title %}{{ title }}{% endblock %}

{% block content %}
<div>
    <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">{{ title }}</h2>
        <form method="post">
            {% csrf_token %}
            <div class="space-y-4">
                {% for field in form %}
                <div>
                    <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-700 mb-1">
                        {{ field.label }}
                    </label>
                    {{ field }}
                    {% if field.errors %}
                    <p class="text-red-500 text-xs italic mt-1">{{ field.errors.0 }}</p>
                    {% endif %}
                </div>
                {% endfor %}
            </div>

            <div class="flex items-center justify-between mt-8 pt-6 border-t border-gray-200">
                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg transition duration-200">
                    Сохранить
                </button>
                <a href="{% url 'expenses:expense_reason_list' %}" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-lg transition duration-200">
                    Отмена
                </a>
            </div>
        </form>
    </div>
</div>
{% endblock %}
```

expense_invoice_detail.html:
```
{% extends "users/base.html" %}

{% block title %}Накладная расхода {{ invoice.invoice_number }}{% endblock %}

{% block content %}
<div>
    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h2 class="text-2xl font-bold text-gray-800">Накладная расхода {{ invoice.invoice_number }}</h2>
                <p class="text-gray-600">от {{ invoice.expense_date|date:"d.m.Y" }}</p>
            </div>
            <span class="px-3 py-1 text-sm rounded-full
                {% if invoice.status == 'draft' %}bg-yellow-100 text-yellow-800
                {% elif invoice.status == 'completed' %}bg-green-100 text-green-800
                {% else %}bg-red-100 text-red-800{% endif %}">
                {{ invoice.get_status_display }}
            </span>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div>
                <h3 class="text-lg font-semibold mb-2">Информация о расходе</h3>
                <p><strong>Причина:</strong> {{ invoice.reason.name }}</p>
                {% if invoice.reason.description %}
                <p><strong>Описание причины:</strong> {{ invoice.reason.description }}</p>
                {% endif %}
            </div>

            <div>
                <h3 class="text-lg font-semibold mb-2">Информация о накладной</h3>
                <p><strong>Создал:</strong> {{ invoice.created_by.get_full_name }}</p>
                <p><strong>Дата создания:</strong> {{ invoice.created_at|date:"d.m.Y H:i" }}</p>
                <p><strong>Общая сумма:</strong> <span class="font-bold text-lg">{{ invoice.total_amount }} ₽</span></p>
            </div>
        </div>

        <h3 class="text-lg font-semibold mb-4">Товары в накладной</h3>
        <div class="overflow-x-auto">
            <table class="min-w-full bg-white rounded-lg">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="py-3 px-4 text-left">Товар</th>
                        <th class="py-3 px-4 text-left">Артикул</th>
                        <th class="py-3 px-4 text-left">Количество</th>
                        <th class="py-3 px-4 text-left">Цена</th>
                        <th class="py-3 px-4 text-left">Сумма</th>
                    </tr>
                </thead>
                <tbody>
                    {% for item in items %}
                    <tr class="border-b border-gray-200">
                        <td class="py-3 px-4">{{ item.product.name }}</td>
                        <td class="py-3 px-4 font-mono">{{ item.product.sku }}</td>
                        <td class="py-3 px-4">{{ item.quantity }} {{ item.product.get_unit_display }}</td>
                        <td class="py-3 px-4">{{ item.product.price }} ₽</td>
                        <td class="py-3 px-4 font-medium">{{ item.total_price }} ₽</td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="5" class="py-4 px-4 text-center text-gray-500">
                            Нет товаров в накладной
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
                <tfoot>
                    <tr class="bg-gray-50">
                        <td colspan="4" class="py-3 px-4 text-right font-semibold">Итого:</td>
                        <td class="py-3 px-4 font-bold text-lg">{{ invoice.total_amount }} ₽</td>
                    </tr>
                </tfoot>
            </table>
        </div>
        {% if invoice.comment %}
        <div class="mt-6">
            <h3 class="text-lg font-semibold mb-2">Комментарий</h3>
            <p class="text-gray-700">{{ invoice.comment }}</p>
        </div>
        {% endif %}

        <div class="flex justify-between items-center mt-8 pt-6 border-t border-gray-200">
            <a href="{% url 'expenses:expense_invoice_list' %}" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-lg">
                Назад к списку
            </a>

            {% if invoice.status == 'draft' %}
            <div class="flex space-x-4">
                <a href="{% url 'expenses:expense_invoice_complete' invoice.pk %}"
                   class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-6 rounded-lg"
                   onclick="return confirm('Завершить накладную? Остатки товаров будут уменьшены.')">
                    Завершить накладную
                </a>
                <a href="{% url 'expenses:expense_invoice_cancel' invoice.pk %}"
                   class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-6 rounded-lg"
                   onclick="return confirm('Отменить накладную?')">
                    Отменить
                </a>
            </div>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}
```

0001_initial.py:
```
# Generated by Django 5.2.6 on 2025-09-27 19:09

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0004_supplier_purchaseinvoice_purchaseinvoiceitem'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExpenseReason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название причины')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Причина расхода',
                'verbose_name_plural': 'Причины расхода',
            },
        ),
        migrations.CreateModel(
            name='ExpenseInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(max_length=50, unique=True, verbose_name='Номер накладной')),
                ('expense_date', models.DateField(verbose_name='Дата расхода')),
                ('status', models.CharField(choices=[('draft', 'Черновик'), ('completed', 'Завершена'), ('cancelled', 'Отменена')], default='draft', max_length=10, verbose_name='Статус')),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Общая стоимость')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Создал')),
                ('reason', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='expenses.expensereason', verbose_name='Причина расхода')),
            ],
            options={
                'verbose_name': 'Накладная расхода',
                'verbose_name_plural': 'Накладные расхода',
                'ordering': ['-expense_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExpenseInvoiceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='Количество')),
                ('total_price', models.DecimalField(decimal_places=2, editable=False, max_digits=10, verbose_name='Общая стоимость')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='expenses.expenseinvoice', verbose_name='Накладная')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Строка накладной расхода',
                'verbose_name_plural': 'Строки накладной расхода',
                'unique_together': {('invoice', 'product')},
            },
        ),
    ]

```
